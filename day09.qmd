---
title: "Day 9: Disk Fragmenter"
---

![Prompt:christmas elves running around a giant cpu chip, cartoon style](images/09.webp){width="500" fig-align="center"}

## Part 1

::: {.callout-note title="Puzzle Info" collapse="true"}
He shows you the disk map (your puzzle input) he's already generated. For example:

```
2333133121414131402
```

The disk map uses a dense format to represent the layout of files and free space on the disk. The digits alternate between indicating the length of a file and the length of free space.

So, a disk map like 12345 would represent a one-block file, two blocks of free space, a three-block file, four blocks of free space, and then a five-block file. A disk map like 90909 would represent three nine-block files in a row (with no free space between them).

Each file on disk also has an ID number based on the order of the files as they appear before they are rearranged, starting with ID 0. So, the disk map 12345 has three files: a one-block file with ID 0, a three-block file with ID 1, and a five-block file with ID 2. Using one character for each block where digits are the file ID and . is free space, the disk map 12345 represents these individual blocks:

```
0..111....22222
```
The first example above, 2333133121414131402, represents these individual blocks:
```
00...111...2...333.44.5555.6666.777.888899
```
The amphipod would like to move file blocks one at a time from the end of the disk to the leftmost free space block (until there are no gaps remaining between file blocks). For the disk map 12345, the process looks like this:

```
0..111....22222
02.111....2222.
022111....222..
0221112...22...
02211122..2....
022111222......
```
The first example requires a few more steps:

```
00...111...2...333.44.5555.6666.777.888899
009..111...2...333.44.5555.6666.777.88889.
0099.111...2...333.44.5555.6666.777.8888..
00998111...2...333.44.5555.6666.777.888...
009981118..2...333.44.5555.6666.777.88....
0099811188.2...333.44.5555.6666.777.8.....
009981118882...333.44.5555.6666.777.......
0099811188827..333.44.5555.6666.77........
00998111888277.333.44.5555.6666.7.........
009981118882777333.44.5555.6666...........
009981118882777333644.5555.666............
00998111888277733364465555.66.............
0099811188827773336446555566..............
```
The final step of this file-compacting process is to update the filesystem checksum. To calculate the checksum, add up the result of multiplying each of these blocks' position with the file ID number it contains. The leftmost block is in position 0. If a block contains free space, skip it instead.

Continuing the first example, the first few blocks' position multiplied by its file ID number are 0 * 0 = 0, 1 * 0 = 0, 2 * 9 = 18, 3 * 9 = 27, 4 * 8 = 32, and so on. In this example, the checksum is the sum of these, 1928.

Compact the amphipod's hard drive using the process he requested. What is the resulting filesystem checksum? (Be careful copy/pasting the input for this puzzle; it is a single, very long line.)
:::

```{python}
eg = "2333133121414131402"

def parse(inp:str) -> list[str]: # <1>
    line = []
    for i,n in enumerate(inp):
        for _ in range(int(n)):
            if i % 2 == 0:
                line.append(i//2)
            else:
                line.append('.')
    return line


def part1(inp:str) -> int:
    line = parse(inp)

    n_dots = line.count(".")
    n_nums = len(line) - n_dots
    only_nums = [l for l in line if l != "."]

    # Compact the data
    compact = []
    for i in range(n_nums):
        if line[i] == ".":
            compact.append(only_nums.pop())
        else:
            compact.append(line[i])

    # Compute checksum
    solution = [i * int(c) for i, c in enumerate(compact)]

    return sum(solution)

part1(eg)
```
1. I should embrace the fact that a list can take in different types. In this case, my parsed list can hold both `int` and `string` for ".". Initially, because I tried to parse everything as string, I wasted a lot of time chasing an error in my solution when it was an issue with the parsing.

```{python}
with open("inputs/09", "r") as f:
    inp = f.read()
part1(inp)
```
## Part 2

::: {.callout-note title="Puzzle Info" collapse="true"}
This time, attempt to move whole files to the leftmost span of free space blocks that could fit the file. Attempt to move each file exactly once in order of decreasing file ID number starting with the file with the highest file ID number. If there is no span of free space to the left of a file that is large enough to fit the file, the file does not move.

The first example from above now proceeds differently:
```
00...111...2...333.44.5555.6666.777.888899
0099.111...2...333.44.5555.6666.777.8888..
0099.1117772...333.44.5555.6666.....8888..
0099.111777244.333....5555.6666.....8888..
00992111777.44.333....5555.6666.....8888..
```
The process of updating the filesystem checksum is the same; now, this example's checksum would be 2858.

Start over, now compacting the amphipod's hard drive using this new method instead. What is the resulting filesystem checksum?
:::

```{python}
def parse2(inp:str) -> (dict, list):
    """
    For part 2, we need to store
    - dict with (file_id, (pos, file_size))
    - list of (pos, free_size)
    """
    files = {}
    frees = []

    file_id = 0
    pos = 0
    for i, ch in enumerate(inp):
        if i % 2 == 0:
            files[file_id] = (pos, int(ch))
            file_id += 1
        else:
            frees.append((pos, int(ch)))
        pos += int(ch)

    return files, frees

def part2(inp:str) -> int:

    files, frees = parse2(inp)

    # Go through files in reverse order
    for (file_id, (file_pos, file_size)) in reversed(files.items()):
        # Compare against frees in normal order
        for i, (free_pos, free_size) in enumerate(frees):

            # if our points cross, there's no free space available for this file
            if free_pos >= file_pos:
                frees = frees[:i] # <1>
                break

            # if size match, file is swapped in and free removed
            if file_size == free_size:
                files[file_id] = (free_pos, file_size)
                frees.pop(i)
                break

            # if file_size is smaller than free_size, we need to update both sizes
            if file_size < free_size:
                files[file_id] = (free_pos, file_size)
                frees[i] = (free_pos + file_size, free_size - file_size)
                break

    # Checksum
    solution = []
    for file_id, (file_pos, file_size) in files.items():
        for i in range(file_pos, file_pos + file_size):
            solution.append(file_id * i)

    return sum(solution)

part2(eg)
```
1. Nice optimisation I learnt from other solutions. If pointers cross, then we know that every free space to the right of `free_pos` is out of contention because our current `file_pos` is to the left of all these free spaces.

```{python}
part2(inp)
```