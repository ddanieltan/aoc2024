[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Advent of Code 2024",
    "section": "",
    "text": "Day 1: Historian Hysteria\n\n\n\n\n\n\n\n\n\n\n\nDay 2: Red-Nosed Reports\n\n\n\n\n\n\n\n\n\n\n\nDay 3: Mull It Over\n\n\n\n\n\n\n\n\n\n\n\nDay 4: Ceres Search\n\n\n\n\n\n\n\n\n\n\n\nDay 5: Print Queue\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "day02.html",
    "href": "day02.html",
    "title": "Day 2: Red-Nosed Reports",
    "section": "",
    "text": "Prompt:red nose reindeer who is holding a clipboard with checklist and looking at a nuclear reactor with nuke logo"
  },
  {
    "objectID": "day02.html#part-1",
    "href": "day02.html#part-1",
    "title": "Day 2: Red-Nosed Reports",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nThe unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:\n7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9\nThis example data contains six reports each containing five levels.\nThe engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:\n\nThe levels are either all increasing or all decreasing.\nAny two adjacent levels differ by at least one and at most three.\n\nIn the example above, the reports can be found safe or unsafe by checking those rules:\n\n7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.\n1 2 7 8 9: Unsafe because 2 7 is an increase of 5.\n9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.\n1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.\n8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.\n1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.\n\nSo, in this example, 2 reports are safe.\nAnalyze the unusual data from the engineers. How many reports are safe?\n\n\n\n\neg = \"\"\"7 6 4 2 1\n1 2 7 8 9\n9 7 6 2 1\n1 3 2 4 5\n8 6 4 4 1\n1 3 6 7 9\n\"\"\"\n\ndef parse(inp:str) -&gt; list[list[int]]:\n    res = []\n    for line in inp.splitlines():\n        row = line.split()\n        res.append([int(x) for x in row])\n    return res\n\n\ndef cond1(row:list[int]) -&gt; bool:\n    # Condition 1: Always inc or dec\n    inc = sorted(row)\n    dec = sorted(row, reverse=True)\n    return all([r == x for r,x in zip(row, inc)]) or all([r == x for r,x in zip(row, dec)])\n\n\ndef cond2(row:list[int]) -&gt; bool:\n    # Condition 2: Delta between 1-3\n1    pairs = zip(row, row[1:])\n    return all([1 &lt;= abs(x-y) &lt;= 3 for x,y in pairs])\n\n\ndef part1(inp:str) -&gt; int:\n    rows = parse(inp)\n    cnt = 0\n    for row in rows:\n        if cond1(row) and cond2(row):\n            cnt += 1\n    return cnt\n\npart1(eg)\n\n\n1\n\nReminder that zip can take inputs of different lengths without error, so I can pass row instead of row[:-1]\n\n\n\n\n2\n\n\n\nwith open(\"inputs/02\",\"r\") as f:\n    inp = f.read()\npart1(inp)\n\n269"
  },
  {
    "objectID": "day02.html#part-2",
    "href": "day02.html#part-2",
    "title": "Day 2: Red-Nosed Reports",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nNow, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.\nMore of the above example’s reports are now safe:\n\n7 6 4 2 1: Safe without removing any level.\n1 2 7 8 9: Unsafe regardless of which level is removed.\n9 7 6 2 1: Unsafe regardless of which level is removed.\n1 3 2 4 5: Safe by removing the second level, 3.\n8 6 4 4 1: Safe by removing the third level, 4.\n1 3 6 7 9: Safe without removing any level.\n\nThanks to the Problem Dampener, 4 reports are actually safe!\n\n\n\n\ndef part2(inp: str) -&gt; int:\n    rows = parse(inp)\n    cnt = 0\n    for row in rows:\n        # Check if original full row passes\n        if cond1(row) and cond2(row):\n            cnt += 1\n1            continue\n        # Check if shortened rows pass\n        for i in range(len(row)):\n            short_row = row.copy()\n            short_row.pop(i)\n            if cond1(short_row) and cond2(short_row):\n                cnt += 1\n                break\n\n    return cnt\n\n\npart2(eg)\n\n\n1\n\nGood refresher on the difference between continue and break\n\n\n\n\n4\n\n\n\npart2(inp)\n\n337"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "day03.html",
    "href": "day03.html",
    "title": "Day 3: Mull It Over",
    "section": "",
    "text": "Prompt: Computer with screen filled with random numbers, letter and digits. Highlight on the letters “mul”. Cartoon style in christmas colours"
  },
  {
    "objectID": "day03.html#part-1",
    "href": "day03.html#part-1",
    "title": "Day 3: Mull It Over",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nThe computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!\nIt seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.\nHowever, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.\nFor example, consider the following section of corrupted memory:\nxmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\nOnly the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (24 + 55 + 118 + 85).\nScan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?\n\n\n\n\nimport re\n\neg = \"xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))\"\n\ndef part1(inp:str) -&gt; int:\n\n    # Extract mul(x,y) instances\n    pattern = r\"mul\\(\\d+,\\d+\\)\"\n    instructions = re.findall(pattern, inp)\n\n    # Extract numbers in each instruction and multiply\n    pattern_nums = r\"\\d+\"\n    nums = [re.findall(pattern_nums, i) for i in instructions ]\n    products = [int(n[0]) * int(n[1]) for n in nums]\n\n    return sum(products)\n\npart1(eg)\n\n161\n\n\n\nwith open(\"inputs/03\", \"r\") as f:\n    inp = f.read()\n\npart1(inp)\n\n178794710"
  },
  {
    "objectID": "day03.html#part-2",
    "href": "day03.html#part-2",
    "title": "Day 3: Mull It Over",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nThere are two new instructions you’ll need to handle:\nThe do() instruction enables future mul instructions. The don’t() instruction disables future mul instructions. Only the most recent do() or don’t() instruction applies. At the beginning of the program, mul instructions are enabled.\nFor example:\nxmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))\nThis corrupted memory is similar to the example from before, but this time the mul(5,5) and mul(11,8) instructions are disabled because there is a don’t() instruction before them. The other mul instructions function normally, including the one at the end that gets re-enabled by a do() instruction.\nThis time, the sum of the results is 48 (24 + 85).\nHandle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?\n\n\n\n\neg2 = \"xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))\"\n\ndef part2(inp:str) -&gt; int:\n\n    # Extract mul(x,y) or don't() or do()\n    pattern = r\"mul\\(\\d+,\\d+\\)|don\\'t\\(\\)|do\\(\\)\"\n    instructions = re.findall(pattern, inp)\n\n    # Find valid calcs\n    calcs = []\n    valid = True\n\n    for i in instructions:\n1        match (i, valid):\n2            case (_, True) if \"mul\" in i:\n                calcs.append(i)\n            case (\"don't()\", True):\n                valid = False\n            case (\"do()\", False):\n                valid = True\n3            case _:\n                #print(f\"Unexpected case : {i, valid} \")\n                ...\n\n    pattern_nums = r\"\\d+\"\n    nums = [re.findall(pattern_nums, c) for c in calcs ]\n    products = [int(n[0]) * int(n[1]) for n in nums]\n\n    return sum(products)\n\npart2(eg2)\n\n\n1\n\nGood opportunity to use case matching. Recall like Scala, _ represents a catchall\n\n2\n\nExample of how to chain an if check after a case match\n\n3\n\nSince we’re using case matching, build the habit of catching all unexpected cases (even if there’s no action required for these cases)\n\n\n\n\n48\n\n\n\npart2(inp)\n\n76729637"
  },
  {
    "objectID": "tmpl.html",
    "href": "tmpl.html",
    "title": "Day 0",
    "section": "",
    "text": "Prompt:"
  },
  {
    "objectID": "tmpl.html#part-1",
    "href": "tmpl.html#part-1",
    "title": "Day 0",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPuzzle Info"
  },
  {
    "objectID": "tmpl.html#part-2",
    "href": "tmpl.html#part-2",
    "title": "Day 0",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPuzzle Info"
  },
  {
    "objectID": "day04.html",
    "href": "day04.html",
    "title": "Day 4: Ceres Search",
    "section": "",
    "text": "Prompt: The letters “X”, “M”, “A”, “S” repeated multiple times in a grid in christmas colours"
  },
  {
    "objectID": "day04.html#part-1",
    "href": "day04.html#part-1",
    "title": "Day 4: Ceres Search",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nAs the search for the Chief continues, a small Elf who lives on the station tugs on your shirt; she’d like to know if you could help her with her word search (your puzzle input). She only has to find one word: XMAS.\nThis word search allows words to be horizontal, vertical, diagonal, written backwards, or even overlapping other words. It’s a little unusual, though, as you don’t merely need to find one instance of XMAS - you need to find all of them. Here are a few ways XMAS might appear, where irrelevant characters have been replaced with .:\n..X...\n.SAMX.\n.A..A.\nXMAS.S\n.X....\nThe actual word search will be full of letters instead. For example:\nMMMSXXMASM\nMSAMXMSMSA\nAMXSXMAAMM\nMSAMASMSMX\nXMASAMXAMM\nXXAMMXXAMA\nSMSMSASXSS\nSAXAMASAAA\nMAMMMXMMMM\nMXMXAXMASX\nIn this word search, XMAS occurs a total of 18 times; here’s the same word search again, but where letters not involved in any XMAS have been replaced with .:\n....XXMAS.\n.SAMXMS...\n...S..A...\n..A.A.MS.X\nXMASAMX.MM\nX.....XA.A\nS.S.S.S.SS\n.A.A.A.A.A\n..M.M.M.MM\n.X.X.XMASX\nTake a look at the little Elf’s word search. How many times does XMAS appear?\n\n\n\n\neg = \"\"\"MMMSXXMASM\nMSAMXMSMSA\nAMXSXMAAMM\nMSAMASMSMX\nXMASAMXAMM\nXXAMMXXAMA\nSMSMSASXSS\nSAXAMASAAA\nMAMMMXMMMM\nMXMXAXMASX\n\"\"\"\n\ndef part1(inp:str) -&gt; int:\n\n    def within_grid(x:int, y:int) -&gt; bool:\n        return (x &gt;= 0) and (x &lt; max_X) and (y &gt;= 0) and (y &lt; max_Y)\n\n    def trace(x:int, y:int, dir_x:int, dir_y:int):\n        \"\"\"\n        Given a starting x,y node, trace down `dir` direction\n        - if out of bounds of wrong letter, end func\n        - if we found a complete XMAS then update solution set\n        \"\"\"\n        coords = tuple((x+i*dir_x, y+i*dir_y ) for i in range(4))\n        target = \"XMAS\"\n\n        for (x,y) , letter in zip(coords, target):\n            if not within_grid(x,y):\n                return\n            elif grid[x][y] != letter:\n                return\n\n        solutions.add(coords)\n\n\n    grid = inp.splitlines()\n    max_X = len(grid)\n    max_Y = len(grid[0])\n    solutions = set()\n    DIRECTIONS = [\n        (-1, 0), # North\n        (-1, 1), # NE\n        (0, 1), # East\n        (1, 1), # SE\n        (1, 0), # South\n        (1, -1), # SW\n        (0, -1), # West\n        (-1, -1) # NW\n    ]\n\n    for x in range(max_X):\n        for y in range(max_Y):\n            if grid[x][y] == \"X\":\n                for (dir_x, dir_y) in DIRECTIONS:\n                    trace(x, y, dir_x, dir_y)\n\n    return len(solutions)\n\npart1(eg)\n\n18\n\n\n\nwith open(\"inputs/04\", \"r\") as f:\n    inp = f.read()\npart1(inp)\n\n2458"
  },
  {
    "objectID": "day04.html#part-2",
    "href": "day04.html#part-2",
    "title": "Day 4: Ceres Search",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nLooking for the instructions, you flip over the word search to find that this isn’t actually an XMAS puzzle; it’s an X-MAS puzzle in which you’re supposed to find two MAS in the shape of an X. One way to achieve that is like this:\nM.S\n.A.\nM.S\nIrrelevant characters have again been replaced with . in the above diagram. Within the X, each MAS can be written forwards or backwards.\nHere’s the same example from before, but this time all of the X-MASes have been kept instead:\n.M.S......\n..A..MSMS.\n.M.S.MAA..\n..A.ASMSM.\n.M.S.M....\n..........\nS.S.S.S.S.\n.A.A.A.A..\nM.M.M.M.M.\n..........\nIn this example, an X-MAS appears 9 times.\nFlip the word search from the instructions back over to the word search side and try again. How many times does an X-MAS appear?\n\n\n\n\nfrom collections import Counter\n\ndef part2(inp:str) -&gt; int:\n\n    def within_grid(x:int, y:int) -&gt; bool:\n        return (x &gt;= 0) and (x &lt; max_X) and (y &gt;= 0) and (y &lt; max_Y)\n\n    def check_corner_letters(x:int, y:int):\n\n        DIRECTIONS = [\n            (-1, 1), # NE\n            (1, 1), # SE\n            (1, -1), # SW\n            (-1, -1) # NW\n        ]\n\n        coords = tuple( (x + dir_x, y + dir_y) for (dir_x, dir_y) in DIRECTIONS)\n\n        # Check no corners are out of bounds\n        for x, y in coords:\n            if not within_grid(x,y):\n                return\n\n        ne, se, sw, nw = tuple(grid[x][y] for x,y in coords)\n\n        # Check we see 2S and 2M in the corners\n        if Counter((ne,se,sw,nw)) == Counter((\"M\",\"M\",\"S\",\"S\")):\n            # Exclude edge case where only diagonals are alike\n1            if not(ne == sw) or not (nw == se):\n                solutions.add(coords)\n\n    grid = inp.splitlines()\n    max_X = len(grid)\n    max_Y = len(grid[0])\n    solutions = set()\n\n    for x in range(max_X):\n        for y in range(max_Y):\n            if grid[x][y] == \"A\":\n                check_corner_letters(x,y)\n\n    return len(solutions)\n\npart2(eg)\n\n\n1\n\nAlternatively, this could have been written as ne != sw but I feel the weird not(ne == sw) feels more intuitive. Ie. I want to exclude coords whose diagonal corners match.\n\n\n\n\n9\n\n\n\npart2(inp)\n\n1945"
  },
  {
    "objectID": "day05.html",
    "href": "day05.html",
    "title": "Day 5: Print Queue",
    "section": "",
    "text": "Prompt:"
  },
  {
    "objectID": "day05.html#part-1",
    "href": "day05.html#part-1",
    "title": "Day 5: Print Queue",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nThe Elf has for you both the page ordering rules and the pages to produce in each update (your puzzle input), but can’t figure out whether each update has the pages in the right order.\nFor example:\n47|53\n97|13\n97|61\n97|47\n75|29\n61|13\n75|53\n29|13\n97|29\n53|29\n61|53\n97|53\n61|29\n47|13\n75|47\n97|75\n47|61\n75|61\n47|29\n75|13\n53|13\n\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\n75,97,47,61,53\n61,13,29\n97,13,75,29,47\nThe first section specifies the page ordering rules, one per line. The first rule, 47|53, means that if an update includes both page number 47 and page number 53, then page number 47 must be printed at some point before page number 53. (47 doesn’t necessarily need to be immediately before 53; other pages are allowed to be between them.)\nThe second section specifies the page numbers of each update. Because most safety manuals are different, the pages needed in the updates are different too. The first update, 75,47,61,53,29, means that the update consists of page numbers 75, 47, 61, 53, and 29.\nTo get the printers going as soon as possible, start by identifying which updates are already in the right order.\nIn the above example, the first update (75,47,61,53,29) is in the right order:\n\n75 is correctly first because there are rules that put each other page after it: 75|47, 75|61, 75|53, and 75|29.\n47 is correctly second because 75 must be before it (75|47) and every other page must be after it according to 47|61, 47|53, and 47|29.\n61 is correctly in the middle because 75 and 47 are before it (75|61 and 47|61) and 53 and 29 are after it (61|53 and 61|29).\n53 is correctly fourth because it is before page number 29 (53|29).\n29 is the only page left and so is correctly last.\n\nBecause the first update does not include some page numbers, the ordering rules involving those missing page numbers are ignored.\nThe second and third updates are also in the correct order according to the rules. Like the first update, they also do not include every page number, and so only some of the ordering rules apply - within each update, the ordering rules that involve missing page numbers are not used.\nThe fourth update, 75,97,47,61,53, is not in the correct order: it would print 75 before 97, which violates the rule 97|75.\nThe fifth update, 61,13,29, is also not in the correct order, since it breaks the rule 29|13.\nThe last update, 97,13,75,29,47, is not in the correct order due to breaking several rules.\nFor some reason, the Elves also need to know the middle page number of each update being printed. Because you are currently only printing the correctly-ordered updates, you will need to find the middle page number of each correctly-ordered update. In the above example, the correctly-ordered updates are:\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\nThese have middle page numbers of 61, 53, and 29 respectively. Adding these page numbers together gives 143.\n\n\n\n\neg = \"\"\"47|53\n97|13\n97|61\n97|47\n75|29\n61|13\n75|53\n29|13\n97|29\n53|29\n61|53\n97|53\n61|29\n47|13\n75|47\n97|75\n47|61\n75|61\n47|29\n75|13\n53|13\n\n75,47,61,53,29\n97,61,53,29,13\n75,29,13\n75,97,47,61,53\n61,13,29\n97,13,75,29,47\n\"\"\"\n\nfrom collections import defaultdict\n\ndef parse(inp:str) -&gt; tuple[dict, dict, list]:\n    top, bot = inp.split(\"\\n\\n\")\n\n    # Bad rules contain all the numbers (values) that cannot come on the left of (key)\n    bad_rules = defaultdict(list)\n    # Good rules contain all the numbers (values) that must come on the left of (key) - used in part2\n    good_rules = defaultdict(list)\n    for t in top.splitlines():\n        a,b = t.split(\"|\")\n        bad_rules[int(b)].append(int(a))\n        good_rules[int(a)].append(int(b))\n\n    lines = []\n    for b in bot.splitlines():\n        line = b.split(\",\")\n        line = [int(l) for l in line]\n        lines.append(line)\n\n    return bad_rules, good_rules, lines\n\ndef part1(inp:str) -&gt; int:\n    rules, _, lines = parse(inp)\n\n    correct = []\n    for line in lines:\n        is_valid = True\n        for i, num in enumerate(line):\n            to_the_right = line[i+1:]\n1            must_be_left = rules[num]\n            if any([x in to_the_right for x in must_be_left]):\n                is_valid = False\n                break\n\n        if is_valid:\n            correct.append(line)\n\n    # Assume all correct lists are an odd numbered length\n    medians = [line[len(line)//2] for line in correct]\n\n    return sum(medians)\n\npart1(eg)\n\n\n1\n\nUse [] to access values from a defaultdict, not .get()\n\n\n\n\n143\n\n\n\nwith open(\"inputs/05\", \"r\") as f:\n    inp = f.read()\n\npart1(inp)\n\n4185"
  },
  {
    "objectID": "day05.html#part-2",
    "href": "day05.html#part-2",
    "title": "Day 5: Print Queue",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nFor each of the incorrectly-ordered updates, use the page ordering rules to put the page numbers in the right order. For the above example, here are the three incorrectly-ordered updates and their correct orderings:\n\n75,97,47,61,53 becomes 97,75,47,61,53.\n61,13,29 becomes 61,29,13.\n97,13,75,29,47 becomes 97,75,47,29,13.\n\nAfter taking only the incorrectly-ordered updates and ordering them correctly, their middle page numbers are 47, 29, and 47. Adding these together produces 123.\nFind the updates which are not in the correct order. What do you get if you add up the middle page numbers after correctly ordering just those updates?\n\n\n\n\ndef part2(inp:str) -&gt; int:\n    bad_rules, good_rules, lines = parse(inp)\n\n    wrong = []\n    for line in lines:\n        is_valid = True\n        for i, num in enumerate(line):\n            to_the_right = line[i+1:]\n            must_be_left = bad_rules[num] # &lt;1&gt; Can't use .get\n            if any([x in to_the_right for x in must_be_left]):\n                is_valid = False\n                break\n\n        if not is_valid:\n            wrong.append(line)\n\n\n    fixed = []\n    for line in wrong:\n        reorder = []\n        for i, num in enumerate(line):\n            score = 0\n            all_but_num = line[:i] + line[i+1:]\n            for n in all_but_num:\n                if n in good_rules[num]:\n                    score += 1\n            reorder.append((score, num))\n\n        reorder.sort(reverse=True)\n        fixed.append([num for _,num in reorder])\n\n\n    # Assume all correct lists are an odd numbered length\n    medians = [line[len(line)//2] for line in fixed]\n\n    return sum(medians)\npart2(eg)\n\n123\n\n\n\npart2(inp)\n\n4480"
  },
  {
    "objectID": "day01.html",
    "href": "day01.html",
    "title": "Day 1: Historian Hysteria",
    "section": "",
    "text": "Prompt: christmas red and green, photo of confused historian holding 2 lists of numeric numbers"
  },
  {
    "objectID": "day01.html#part-1",
    "href": "day01.html#part-1",
    "title": "Day 1: Historian Hysteria",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nThere’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\n\neg = \"\"\"3   4\n4   3\n2   5\n1   3\n3   9\n3   3\n\"\"\"\n\ndef parse(inp:str) -&gt; tuple[list[int], list[int]]:\n    # Parse input into 2 lists\n    A = list()\n    B = list()\n    for line in inp.splitlines():\n        a, b = line.split()\n        A.append(int(a))\n        B.append(int(b))\n\n    # Sort and zip\n    A = sorted(A)\n    B = sorted(B)\n\n    return (A,B)\n\n\ndef part1(inp:str) -&gt; int:\n    A,B = parse(inp)\n    return sum([abs(a-b) for a,b in zip(A,B)])\n\n\npart1(eg)\n\n11\n\n\n\nwith open(\"inputs/01\",\"r\") as f:\n    inp = f.read()\npart1(inp)\n\n1646452"
  },
  {
    "objectID": "day01.html#part-2",
    "href": "day01.html#part-2",
    "title": "Day 1: Historian Hysteria",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPuzzle Info\n\n\n\n\n\nThis time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nFor these example lists, here is the process of finding the similarity score:\n\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.\nThe second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.\nThe third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).\nThe fourth number, 1, also does not appear in the right list.\nThe fifth number, 3, appears in the right list three times; the similarity score increases by 9.\nThe last number, 3, appears in the right list three times; the similarity score again increases by 9.\n\nSo, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\n\n\n\n\nfrom collections import Counter\n\ndef part2(inp:str):\n    A, B = parse(inp)\n    cnts = Counter(B)\n    calc = [a * cnts.get(a,0) for a in A]\n\n    return sum(calc)\n\npart2(eg)\n\n31\n\n\n\npart2(inp)\n\n23609874"
  }
]