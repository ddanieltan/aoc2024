[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üéÖüèº Advent of Code 2024",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\n\n\n\nDay 1: Historian Hysteria\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "day/01/index.html",
    "href": "day/01/index.html",
    "title": "Day 1: Historian Hysteria",
    "section": "",
    "text": "christmas red and green, photo of confused historian holding 2 lists of numeric numbers"
  },
  {
    "objectID": "day/01/index.html#part-1",
    "href": "day/01/index.html#part-1",
    "title": "Day 1: Historian Hysteria",
    "section": "Part 1",
    "text": "Part 1\n\n\n\n\n\n\nPrompt\n\n\n\n\n\nThere‚Äôs just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren‚Äôt very similar. Maybe you can help The Historians reconcile their lists?\nFor example:\n3   4\n4   3\n2   5\n1   3\n3   9\n3   3\nMaybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.\nWithin each pair, figure out how far apart the two numbers are; you‚Äôll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.\nIn the example list above, the pairs and distances would be as follows:\n\nThe smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.\nThe second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.\nThe third-smallest number in both lists is 3, so the distance between them is 0.\nThe next numbers to pair up are 3 and 4, a distance of 1.\nThe fifth-smallest numbers in each list are 3 and 5, a distance of 2.\nFinally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.\n\nTo find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!\nYour actual left and right lists contain many location IDs. What is the total distance between your lists?\n\n\n\n\neg = \"\"\"3   4\n4   3\n2   5\n1   3\n3   9\n3   3\n\"\"\"\n\ndef parse(inp:str) -&gt; tuple[list[int], list[int]]:\n    # Parse input into 2 lists\n    A = list()\n    B = list()\n    for line in inp.splitlines():\n        a, b = line.split()\n        A.append(int(a))\n        B.append(int(b))\n\n    # Sort and zip\n    A = sorted(A)\n    B = sorted(B)\n\n    return (A,B)\n\n\ndef part1(inp:str) -&gt; int:\n    A,B = parse(inp)\n    return sum([abs(a-b) for a,b in zip(A,B)])\n\n\npart1(eg)\n\n11\n\n\n\nwith open(\"input.txt\",\"r\") as f:\n    inp = f.read()\npart1(inp)\n\n1646452"
  },
  {
    "objectID": "day/01/index.html#part-2",
    "href": "day/01/index.html#part-2",
    "title": "Day 1: Historian Hysteria",
    "section": "Part 2",
    "text": "Part 2\n\n\n\n\n\n\nPrompt\n\n\n\n\n\nThis time, you‚Äôll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.\nFor these example lists, here is the process of finding the similarity score:\n\nThe first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.\nThe second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.\nThe third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).\nThe fourth number, 1, also does not appear in the right list.\nThe fifth number, 3, appears in the right list three times; the similarity score increases by 9.\nThe last number, 3, appears in the right list three times; the similarity score again increases by 9.\n\nSo, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).\nOnce again consider your left and right lists. What is their similarity score?\n\n\n\n\nfrom collections import Counter\n\ndef part2(inp:str):\n    A, B = parse(inp)\n    cnts = Counter(B)\n    calc = [a * cnts.get(a,0) for a in A]\n\n    return sum(calc)\n\npart2(eg)\n\n31\n\n\n\npart2(inp)\n\n23609874"
  }
]