---
title: "Day 15: Warehouse Woes"
---

![Prompt:](images/01.webp){width="500" fig-align="center"}

## Part 1

::: {.callout-note title="Puzzle Info" collapse="true"}
```
##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^
```
As the robot (@) attempts to move, if there are any boxes (O) in the way, the robot will also attempt to push those boxes. However, if this action would cause the robot or a box to move into a wall (#), nothing moves instead, including the robot. The initial positions of these are shown on the map at the top of the document the lanternfish gave you.

The rest of the document describes the moves (^ for up, v for down, < for left, > for right) that the robot will attempt to make, in order. (The moves form a single giant sequence; they are broken into multiple lines just to make copy-pasting easier. Newlines within the move sequence should be ignored.)

Here is a smaller example to get started:
```
########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

<^^>>>vv<v>>v<<
```
Were the robot to attempt the given sequence of moves, it would push around the boxes as follows:

```
Initial state:
########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move <:
########
#..O.O.#
##@.O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move ^:
########
#.@O.O.#
##..O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move ^:
########
#.@O.O.#
##..O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move >:
########
#..@OO.#
##..O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move >:
########
#...@OO#
##..O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move >:
########
#...@OO#
##..O..#
#...O..#
#.#.O..#
#...O..#
#......#
########

Move v:
########
#....OO#
##..@..#
#...O..#
#.#.O..#
#...O..#
#...O..#
########

Move v:
########
#....OO#
##..@..#
#...O..#
#.#.O..#
#...O..#
#...O..#
########

Move <:
########
#....OO#
##.@...#
#...O..#
#.#.O..#
#...O..#
#...O..#
########

Move v:
########
#....OO#
##.....#
#..@O..#
#.#.O..#
#...O..#
#...O..#
########

Move >:
########
#....OO#
##.....#
#...@O.#
#.#.O..#
#...O..#
#...O..#
########

Move >:
########
#....OO#
##.....#
#....@O#
#.#.O..#
#...O..#
#...O..#
########

Move v:
########
#....OO#
##.....#
#.....O#
#.#.O@.#
#...O..#
#...O..#
########

Move <:
########
#....OO#
##.....#
#.....O#
#.#O@..#
#...O..#
#...O..#
########

Move <:
########
#....OO#
##.....#
#.....O#
#.#O@..#
#...O..#
#...O..#
########
The larger example has many more moves; after the robot has finished those moves, the warehouse would look like this:

##########
#.O.O.OOO#
#........#
#OO......#
#OO@.....#
#O#.....O#
#O.....OO#
#O.....OO#
#OO....OO#
##########
```
The lanternfish use their own custom Goods Positioning System (GPS for short) to track the locations of the boxes. The GPS coordinate of a box is equal to 100 times its distance from the top edge of the map plus its distance from the left edge of the map. (This process does not stop at wall tiles; measure all the way to the edges of the map.)

So, the box shown below has a distance of 1 from the top edge of the map and 4 from the left edge of the map, resulting in a GPS coordinate of 100 * 1 + 4 = 104.
```
#######
#...O..
#......
```
The lanternfish would like to know the sum of all boxes' GPS coordinates after the robot finishes moving. In the larger example, the sum of all boxes' GPS coordinates is 10092. In the smaller example, the sum is 2028.

Predict the motion of the robot and boxes in the warehouse. After the robot is finished moving, what is the sum of all boxes' GPS coordinates?
:::

```{python}
eg = """##########
#..O..O.O#
#......O.#
#.OO..O.O#
#..O@..O.#
#O#..O...#
#O..O..O.#
#.OO.O.OO#
#....O...#
##########

<vv>^<v^>v>^vv^v>v<>v^v<v<^vv<<<^><<><>>v<vvv<>^v^>^<<<><<v<<<v^vv^v>^
vvv<<^>^v^^><<>>><>^<<><^vv^^<>vvv<>><^^v>^>vv<>v<<<<v<^v>^<^^>>>^<v<v
><>vv>v^v^<>><>>>><^^>vv>v<^^^>>v^v^<^^>v^^>v^<^v>v<>>v^v^<v>v^^<^^vv<
<<v<^>>^^^^>>>v^<>vvv^><v<<<>^^^vv^<vvv>^>v<^^^^v<>^>vvvv><>>v^<<^^^^^
^><^><>>><>^^<<^^v>>><^<v>^<vv>>v>>>^v><>^v><<<<v>>v<v<v>vvv>^<><<>^><
^>><>^v<><^vvv<^^<><v<<<<<><^v<<<><<<^^<v<^^^><^>>^<v^><<<^>>^v<v^v<v^
>^>>^v>vv>^<<^v<>><<><<v<<v><>v<^vv<<<>^^v^>^^>>><<^v>>v^v><^^>>^<>vv^
<><^^>^^^<><vvvvv^v<v<<>^v<v>v<<^><<><<><<<^^<<<^<<>><<><^^^>^^<>^>v<>
^^>vv<^v^v<vv>^<><v<^v>^^^>>>^^vvv^>vvv<>>>^<^>>>>>^<<^v>^vvv<>^<><<v>
v^^>>><<^^<>>^v^<v^vv<>v^<<>^<^v^v><^<<<><<^<v><v<>vv>>v><v^<vv<>v^<<^
"""

DIRECTIONS = {
    "<": (0,-1),
    "^": (-1, 0),
    ">": (0, 1),
    "v": (1, 0)
}

def parse(inp:str) -> tuple[list, str]:
    top, bot = inp.split("\n\n")

    grid = [list(line) for line in top.splitlines()]

    moves = bot.replace("\n","")

    return grid, moves

def part1(inp:str) -> int:
    grid, moves = parse(inp)


    for move in moves:
        # Locate start
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                if grid[x][y] == "@":
                    start = (x,y)

        dx, dy = DIRECTIONS[move]
        boxes = []
        sx, sy = start
        x,y = start

        while True:
            # Take a step
            x += dx
            y += dy

            # Do nothing if we hit wall
            if grid[x][y] == "#":
                break

            # If hit box, collect
            if grid[x][y] == "O":
                boxes.append((x,y))

            # If hit free space, update locations
            if grid[x][y] == ".":
                # Update start
                grid[sx][sy] = "."
                grid[sx+dx][sy+dy] = "@"
                # Update boxes
                for (bx, by) in boxes:
                    grid[bx+dx][by+dy] = "O"
                break

    gps = []
    for x in range(len(grid)):
        for y in range(len(grid[0])):
            if grid[x][y] == "O":
                gps.append(100 * x + y)

    return sum(gps)

part1(eg)
```

```{python}
with open("inputs/15", "r") as f:
    inp = f.read()
part1(inp)
```
## Part 2

::: {.callout-note title="Puzzle Info" collapse="true"}
To get the wider warehouse's map, start with your original map and, for each tile, make the following changes:

- If the tile is #, the new map contains ## instead.
- If the tile is O, the new map contains [] instead.
- If the tile is ., the new map contains .. instead.
- If the tile is @, the new map contains @. instead.

This will produce a new warehouse map which is twice as wide and with wide boxes that are represented by []. (The robot does not change size.)

The larger example from before would now look like this:
```
####################
##....[]....[]..[]##
##............[]..##
##..[][]....[]..[]##
##....[]@.....[]..##
##[]##....[]......##
##[]....[]....[]..##
##..[][]..[]..[][]##
##........[]......##
####################
```
Because boxes are now twice as wide but the robot is still the same size and speed, boxes can be aligned such that they directly push two other boxes at once. For example, consider this situation:
```
#######
#...#.#
#.....#
#..OO@#
#..O..#
#.....#
#######

<vv<<^^<<^^
```
After appropriately resizing this map, the robot would push around these boxes as follows:
```
Initial state:
##############
##......##..##
##..........##
##....[][]@.##
##....[]....##
##..........##
##############

Move <:
##############
##......##..##
##..........##
##...[][]@..##
##....[]....##
##..........##
##############

Move v:
##############
##......##..##
##..........##
##...[][]...##
##....[].@..##
##..........##
##############

Move v:
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##.......@..##
##############

Move <:
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##......@...##
##############

Move <:
##############
##......##..##
##..........##
##...[][]...##
##....[]....##
##.....@....##
##############

Move ^:
##############
##......##..##
##...[][]...##
##....[]....##
##.....@....##
##..........##
##############

Move ^:
##############
##......##..##
##...[][]...##
##....[]....##
##.....@....##
##..........##
##############

Move <:
##############
##......##..##
##...[][]...##
##....[]....##
##....@.....##
##..........##
##############

Move <:
##############
##......##..##
##...[][]...##
##....[]....##
##...@......##
##..........##
##############

Move ^:
##############
##......##..##
##...[][]...##
##...@[]....##
##..........##
##..........##
##############

Move ^:
##############
##...[].##..##
##...@.[]...##
##....[]....##
##..........##
##..........##
##############
This warehouse also uses GPS to locate the boxes. For these larger boxes, distances are measured from the edge of the map to the closest edge of the box in question. So, the box shown below has a distance of 1 from the top edge of the map and 5 from the left edge of the map, resulting in a GPS coordinate of 100 * 1 + 5 = 105.

##########
##...[]...
##........
In the scaled-up version of the larger example from above, after the robot has finished all of its moves, the warehouse would look like this:

####################
##[].......[].[][]##
##[]...........[].##
##[]........[][][]##
##[]......[]....[]##
##..##......[]....##
##..[]............##
##..@......[].[][]##
##......[][]..[]..##
####################
```
The sum of these boxes' GPS coordinates is 9021.

Predict the motion of the robot and boxes in this new, scaled-up warehouse. What is the sum of all boxes' final GPS coordinates?
:::

```{python}

EXPAND = {
    "#":"##",
    "O":"[]",
    ".":"..",
    "@":"@."
}

def parse2(inp:str) -> tuple[list, str]:
    top, bot = inp.split("\n\n")

    grid1 = [list(line) for line in top.splitlines()]
    grid = []
    for line in grid1:
        exp_line = ""
        for ch in line:
            exp_line += EXPAND[ch]
        grid.append(list(exp_line))

    moves = bot.replace("\n","")

    return grid, moves


def part2(inp:str) -> int:
    grid, moves = parse2(inp)
    for row in grid:
        print(*row,sep="")

    for move in moves:
        # Locate start
        for x in range(len(grid)):
            for y in range(len(grid[0])):
                if grid[x][y] == "@":
                    start = (x,y)

        boxes = set()
        dx, dy = DIRECTIONS[move]
        sx, sy = start
        x,y = start

        print(f"{(move, x, y, dx, dy) =}")
        # Horizontal movement
        if dx == 0:
            while True:
                x += dx
                y += dy

                if grid[x][y] == "#":
                    break

                if (grid[x][y] == "]") or (grid[x][y] == "["):
                    boxes.add((grid[x][y],x,y))

                if grid[x][y] == ".":
                    grid[sx][sy] = "."
                    grid[sx+dx][sy+dy] = "@"
                    for (br, bx, by) in boxes:
                        grid[bx+dx][by+dy] = br

                    for row in grid:
                        print(*row,sep="")

                    break

        # Vertical movement
        else:
            while True:
                x += dx
                y += dy

                # Dfs data structures for search
                visited = set()

                if grid[x][y] == "#":
                    break
                if (grid[x][y] == "]") or (grid[x][y] == "["):
                    queue = [(x,y)]
                    while queue:
                        (x,y) = queue.pop()
                        if (x,y) not in visited:
                            # Fan out
                            if grid[x][y] == "[":
                                boxes.add((grid[x][y], x, y))
                                queue.append((x,y+1))
                                boxes.add((grid[x][y+1], x, y+1))
                            if grid[x][y] == "]":
                                boxes.add((grid[x][y], x, y))
                                queue.append((x,y-1))
                                boxes.add((grid[x][y-1], x, y-1))

                            # Look ahead
                            if grid[x+dx][y+dy] in ["[","]"]:
                                queue.append((x+dx,y+dy))

                        visited.add((x,y))
                if grid[x][y] == ".":
                    ahead = [grid[x+dx][y+dy] in ["[","]","."] for (_, x, y) in boxes]
                    if all(ahead):
                        grid[sx][sy] = "."
                        grid[sx+dx][sy+dy] = "@"
                        for (br, bx, by) in boxes:
                            grid[bx+dx][by+dy] = br

                        for row in grid:
                            print(*row,sep="")
                    break


    print()
    for row in grid:
        print(*row,sep="")

    # gps = []
    # for x in range(len(grid)):
    #     for y in range(len(grid[0])):
    #         if grid[x][y] == "O":
    #             gps.append(100 * x + y)

    # return sum(gps)

# part2(eg)
```

