---
title: "Day 11: Plutonian Pebbles"
---

![Prompt:christmas elves looking at a line of pebbles that are multiplying, cartoon style](images/11.webp){width="500" fig-align="center"}

## Part 1

::: {.callout-note title="Puzzle Info" collapse="true"}
As you observe them for a while, you find that the stones have a consistent behavior. Every time you blink, the stones each simultaneously change according to the first applicable rule in this list:

- If the stone is engraved with the number 0, it is replaced by a stone engraved with the number 1.
- If the stone is engraved with a number that has an even number of digits, it is replaced by two stones. The left half of the digits are engraved on the new left stone, and the right half of the digits are engraved on the new right stone. (The new numbers don't keep extra leading zeroes: 1000 would become stones 10 and 0.)
- If none of the other rules apply, the stone is replaced by a new stone; the old stone's number multiplied by 2024 is engraved on the new stone.
No matter how the stones change, their order is preserved, and they stay on their perfectly straight line.

How will the stones evolve if you keep blinking at them? You take a note of the number engraved on each stone in the line (your puzzle input).

If you have an arrangement of five stones engraved with the numbers 0 1 10 99 999 and you blink once, the stones transform as follows:

- The first stone, 0, becomes a stone marked 1.
- The second stone, 1, is multiplied by 2024 to become 2024.
- The third stone, 10, is split into a stone marked 1 followed by a stone marked 0.
- The fourth stone, 99, is split into two stones marked 9.
- The fifth stone, 999, is replaced by a stone marked 2021976.

So, after blinking once, your five stones would become an arrangement of seven stones engraved with the numbers 1 2024 1 0 9 9 2021976.

Here is a longer example:
```
Initial arrangement:
125 17

After 1 blink:
253000 1 7

After 2 blinks:
253 0 2024 14168

After 3 blinks:
512072 1 20 24 28676032

After 4 blinks:
512 72 2024 2 0 2 4 2867 6032

After 5 blinks:
1036288 7 2 20 24 4048 1 4048 8096 28 67 60 32

After 6 blinks:
2097446912 14168 4048 2 0 2 4 40 48 2024 40 48 80 96 2 8 6 7 6 0 3 2
In this example, after blinking six times, you would have 22 stones. After blinking 25 times, you would have 55312 stones!
```
Consider the arrangement of stones in front of you. How many stones will you have after blinking 25 times?
:::

```{python}
eg = "125 17"

import itertools

def parse(inp: str) -> list[int]:
    return [int(s) for s in inp.split()]


def blink(nums: list[int]) -> list[int]:
    calc = []
    for i, n in enumerate(nums):
        if n == 0:
            calc.append([1])
        elif len(str(n)) % 2 == 0:
            cutoff = len(str(n)) // 2
            front = int(str(n)[:cutoff])
            back = int(str(n)[cutoff:])
            calc.append([front, back])
        else:
            calc.append([n * 2024])

    return list(itertools.chain.from_iterable(calc)) # <1>

def part1(inp:str) -> int:
    nums = parse(inp)
    for _ in range(25):
        nums = blink(nums)
    return len(nums)

part1(eg)
```
1. Convenient way to flatten a list of lists

```{python}
with open("inputs/11", "r") as f:
    inp = f.read()
part1(inp)
```
::: {.callout-note title="Puzzle Info" collapse="true"}
How many stones would you have after blinking a total of 75 times?
:::

```{python}
from collections import Counter # <1>

eg = "125 17"

def parse2(inp:str) -> Counter:
    return Counter([int(s) for s in inp.split()])

def blink2(counter:Counter) -> Counter:
    updates = Counter()
    for num, freq in counter.items():
        # Update new freq
        if num == 0:
            updates[1] += freq
        elif len(str(num)) % 2 == 0:
            cutoff = len(str(num)) // 2
            front = int(str(num)[:cutoff])
            back = int(str(num)[cutoff:])
            updates[front] += freq
            updates[back] += freq
        else:
            updates[num*2024] += freq

        # Remove old freq
        updates[num] -= freq

    for num, freq in updates.items():
        counter[num] += freq
        # Prune entries that have 0 freq
        if counter[num] == 0:
            counter.pop(num)

    return counter

def part2(inp:str) -> int:
    nums = parse2(inp)
    for _ in range(75):
        nums = blink2(nums)
    return sum(nums.values())

part2(inp)
```
1. Crux of this part 2 is to change the way we store our representation of the numbers to a frequency table. In this scenario, using `Counter` is both easy and apt.