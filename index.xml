<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Advent of Code 2024</title>
<link>https://ddanieltan.github.io/aoc2024/</link>
<atom:link href="https://ddanieltan.github.io/aoc2024/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Sat, 07 Dec 2024 18:26:14 GMT</lastBuildDate>
<item>
  <title>Day 1: Historian Hysteria</title>
  <link>https://ddanieltan.github.io/aoc2024/day01.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/01.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt: christmas red and green, photo of confused historian holding 2 lists of numeric numbers</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?</p>
<p>For example:</p>
<pre><code>3   4
4   3
2   5
1   3
3   9
3   3</code></pre>
<p>Maybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.</p>
<p>Within each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.</p>
<p>In the example list above, the pairs and distances would be as follows:</p>
<ul>
<li>The smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.</li>
<li>The second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.</li>
<li>The third-smallest number in both lists is 3, so the distance between them is 0.</li>
<li>The next numbers to pair up are 3 and 4, a distance of 1.</li>
<li>The fifth-smallest numbers in each list are 3 and 5, a distance of 2.</li>
<li>Finally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.</li>
</ul>
<p>To find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!</p>
<p>Your actual left and right lists contain many location IDs. What is the total distance between your lists?</p>
</div>
</div>
</div>
<div id="0fe4bf18" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""3   4</span></span>
<span id="cb2-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4   3</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2   5</span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1   3</span></span>
<span id="cb2-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3   9</span></span>
<span id="cb2-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3   3</span></span>
<span id="cb2-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]:</span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse input into 2 lists</span></span>
<span id="cb2-11">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb2-12">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inp.splitlines():</span>
<span id="cb2-14">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split()</span>
<span id="cb2-15">        A.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(a))</span>
<span id="cb2-16">        B.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(b))</span>
<span id="cb2-17"></span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort and zip</span></span>
<span id="cb2-19">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(A)</span>
<span id="cb2-20">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(B)</span>
<span id="cb2-21"></span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (A,B)</span>
<span id="cb2-23"></span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-26">    A,B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb2-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(A,B)])</span>
<span id="cb2-28"></span>
<span id="cb2-29"></span>
<span id="cb2-30">part1(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>11</code></pre>
</div>
</div>
<div id="c43332a7" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/01"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb4-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>1646452</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>This time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.</p>
<p>For these example lists, here is the process of finding the similarity score:</p>
<ul>
<li>The first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.</li>
<li>The second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.</li>
<li>The third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).</li>
<li>The fourth number, 1, also does not appear in the right list.</li>
<li>The fifth number, 3, appears in the right list three times; the similarity score increases by 9.</li>
<li>The last number, 3, appears in the right list three times; the similarity score again increases by 9.</li>
</ul>
<p>So, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).</p>
<p>Once again consider your left and right lists. What is their similarity score?</p>
</div>
</div>
</div>
<div id="11da0a75" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb6-4">    A, B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb6-5">    cnts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(B)</span>
<span id="cb6-6">    calc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cnts.get(a,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> A]</span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(calc)</span>
<span id="cb6-9"></span>
<span id="cb6-10">part2(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>31</code></pre>
</div>
</div>
<div id="41540399" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>23609874</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day01.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
<item>
  <title>Day 2: Red-Nosed Reports</title>
  <link>https://ddanieltan.github.io/aoc2024/day02.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/02.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt:red nose reindeer who is holding a clipboard with checklist and looking at a nuclear reactor with nuke logo</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:</p>
<pre><code>7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9</code></pre>
<p>This example data contains six reports each containing five levels.</p>
<p>The engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:</p>
<ul>
<li>The levels are either all increasing or all decreasing.</li>
<li>Any two adjacent levels differ by at least one and at most three.</li>
</ul>
<p>In the example above, the reports can be found safe or unsafe by checking those rules:</p>
<ul>
<li>7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.</li>
<li>1 2 7 8 9: Unsafe because 2 7 is an increase of 5.</li>
<li>9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.</li>
<li>1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.</li>
<li>8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.</li>
<li>1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.</li>
</ul>
<p>So, in this example, 2 reports are safe.</p>
<p>Analyze the unusual data from the engineers. How many reports are safe?</p>
</div>
</div>
</div>
<div id="1fe73e86" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""7 6 4 2 1</span></span>
<span id="annotated-cell-1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 2 7 8 9</span></span>
<span id="annotated-cell-1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">9 7 6 2 1</span></span>
<span id="annotated-cell-1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 3 2 4 5</span></span>
<span id="annotated-cell-1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8 6 4 4 1</span></span>
<span id="annotated-cell-1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 3 6 7 9</span></span>
<span id="annotated-cell-1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="annotated-cell-1-8"></span>
<span id="annotated-cell-1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]:</span>
<span id="annotated-cell-1-10">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inp.splitlines():</span>
<span id="annotated-cell-1-12">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split()</span>
<span id="annotated-cell-1-13">        res.append([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row])</span>
<span id="annotated-cell-1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span>
<span id="annotated-cell-1-15"></span>
<span id="annotated-cell-1-16"></span>
<span id="annotated-cell-1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cond1(row:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="annotated-cell-1-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Condition 1: Always inc or dec</span></span>
<span id="annotated-cell-1-19">    inc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row)</span>
<span id="annotated-cell-1-20">    dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row, reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(row, inc)]) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(row, dec)])</span>
<span id="annotated-cell-1-22"></span>
<span id="annotated-cell-1-23"></span>
<span id="annotated-cell-1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cond2(row:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="annotated-cell-1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Condition 2: Delta between 1-3</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-26" class="code-annotation-target">    pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(row, row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="annotated-cell-1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs])</span>
<span id="annotated-cell-1-28"></span>
<span id="annotated-cell-1-29"></span>
<span id="annotated-cell-1-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-1-31">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="annotated-cell-1-32">    cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="annotated-cell-1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rows:</span>
<span id="annotated-cell-1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cond1(row) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> cond2(row):</span>
<span id="annotated-cell-1-35">            cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cnt</span>
<span id="annotated-cell-1-37"></span>
<span id="annotated-cell-1-38">part1(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="26" data-code-annotation="1">Reminder that <code>zip</code> can take inputs of different lengths without error, so I can pass <code>row</code> instead of <code>row[:-1]</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>2</code></pre>
</div>
</div>
<div id="8fef904f" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/02"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>269</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.</p>
<p>More of the above example’s reports are now safe:</p>
<ul>
<li>7 6 4 2 1: Safe without removing any level.</li>
<li>1 2 7 8 9: Unsafe regardless of which level is removed.</li>
<li>9 7 6 2 1: Unsafe regardless of which level is removed.</li>
<li>1 3 2 4 5: Safe by removing the second level, 3.</li>
<li>8 6 4 4 1: Safe by removing the third level, 4.</li>
<li>1 3 6 7 9: Safe without removing any level.</li>
</ul>
<p>Thanks to the Problem Dampener, 4 reports are actually safe!</p>
</div>
</div>
</div>
<div id="0c7a11b6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-3-2">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="annotated-cell-3-3">    cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="annotated-cell-3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rows:</span>
<span id="annotated-cell-3-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if original full row passes</span></span>
<span id="annotated-cell-3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cond1(row) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> cond2(row):</span>
<span id="annotated-cell-3-7">            cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-8" class="code-annotation-target">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="annotated-cell-3-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if shortened rows pass</span></span>
<span id="annotated-cell-3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(row)):</span>
<span id="annotated-cell-3-11">            short_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.copy()</span>
<span id="annotated-cell-3-12">            short_row.pop(i)</span>
<span id="annotated-cell-3-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cond1(short_row) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> cond2(short_row):</span>
<span id="annotated-cell-3-14">                cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-3-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="annotated-cell-3-16"></span>
<span id="annotated-cell-3-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cnt</span>
<span id="annotated-cell-3-18"></span>
<span id="annotated-cell-3-19"></span>
<span id="annotated-cell-3-20">part2(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="8,15" data-code-annotation="1">Good refresher on the difference between <code>continue</code> and <code>break</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>4</code></pre>
</div>
</div>
<div id="5f640460" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>337</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day02.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
<item>
  <title>Day 3: Mull It Over</title>
  <link>https://ddanieltan.github.io/aoc2024/day03.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/03.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt: Computer with screen filled with random numbers, letter and digits. Highlight on the letters “mul”. Cartoon style in christmas colours</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!</p>
<p>It seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.</p>
<p>However, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.</p>
<p>For example, consider the following section of corrupted memory:</p>
<p><code>xmul(2,4)%&amp;mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))</code></p>
<p>Only the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2<em>4 + 5</em>5 + 11<em>8 + 8</em>5).</p>
<p>Scan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?</p>
</div>
</div>
</div>
<div id="434ee5b0" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb1-2"></span>
<span id="cb1-3">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xmul(2,4)%&amp;mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract mul(x,y) instances</span></span>
<span id="cb1-8">    pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"mul\(\d+,\d+\)"</span></span>
<span id="cb1-9">    instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, inp)</span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract numbers in each instruction and multiply</span></span>
<span id="cb1-12">    pattern_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+"</span></span>
<span id="cb1-13">    nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [re.findall(pattern_nums, i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> instructions ]</span>
<span id="cb1-14">    products <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums]</span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(products)</span>
<span id="cb1-17"></span>
<span id="cb1-18">part1(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>161</code></pre>
</div>
</div>
<div id="9e57a1ae" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/03"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3"></span>
<span id="cb3-4">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>178794710</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There are two new instructions you’ll need to handle:</p>
<p>The do() instruction enables future mul instructions. The don’t() instruction disables future mul instructions. Only the most recent do() or don’t() instruction applies. At the beginning of the program, mul instructions are enabled.</p>
<p>For example:</p>
<p><code>xmul(2,4)&amp;mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))</code></p>
<p>This corrupted memory is similar to the example from before, but this time the mul(5,5) and mul(11,8) instructions are disabled because there is a don’t() instruction before them. The other mul instructions function normally, including the one at the end that gets re-enabled by a do() instruction.</p>
<p>This time, the sum of the results is 48 (2<em>4 + 8</em>5).</p>
<p>Handle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?</p>
</div>
</div>
</div>
<div id="413c6365" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1">eg2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xmul(2,4)&amp;mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"</span></span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-3-4"></span>
<span id="annotated-cell-3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract mul(x,y) or don't() or do()</span></span>
<span id="annotated-cell-3-6">    pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"mul\(\d+,\d+\)|don\'t\(\)|do\(\)"</span></span>
<span id="annotated-cell-3-7">    instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, inp)</span>
<span id="annotated-cell-3-8"></span>
<span id="annotated-cell-3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find valid calcs</span></span>
<span id="annotated-cell-3-10">    calcs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-3-11">    valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-3-12"></span>
<span id="annotated-cell-3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> instructions:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-14" class="code-annotation-target">        match (i, valid):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-15" class="code-annotation-target">            case (_, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mul"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> i:</span>
<span id="annotated-cell-3-16">                calcs.append(i)</span>
<span id="annotated-cell-3-17">            case (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"don't()"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="annotated-cell-3-18">                valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-3-19">            case (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"do()"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="annotated-cell-3-20">                valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-21" class="code-annotation-target">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> _:</span>
<span id="annotated-cell-3-22">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(f"Unexpected case : {i, valid} ")</span></span>
<span id="annotated-cell-3-23">                ...</span>
<span id="annotated-cell-3-24"></span>
<span id="annotated-cell-3-25">    pattern_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+"</span></span>
<span id="annotated-cell-3-26">    nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [re.findall(pattern_nums, c) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> calcs ]</span>
<span id="annotated-cell-3-27">    products <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums]</span>
<span id="annotated-cell-3-28"></span>
<span id="annotated-cell-3-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(products)</span>
<span id="annotated-cell-3-30"></span>
<span id="annotated-cell-3-31">part2(eg2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="14" data-code-annotation="1">Good opportunity to use case matching. Recall like Scala, <code>_</code> represents a catchall</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="15" data-code-annotation="2">Example of how to chain an <code>if</code> check after a case match</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="21" data-code-annotation="3">Since we’re using case matching, build the habit of catching all unexpected cases (even if there’s no action required for these cases)</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>48</code></pre>
</div>
</div>
<div id="894cb473" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>76729637</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day03.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
<item>
  <title>Day 4: Ceres Search</title>
  <link>https://ddanieltan.github.io/aoc2024/day04.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/04.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt: The letters “X”, “M”, “A”, “S” repeated multiple times in a grid in christmas colours</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>As the search for the Chief continues, a small Elf who lives on the station tugs on your shirt; she’d like to know if you could help her with her word search (your puzzle input). She only has to find one word: XMAS.</p>
<p>This word search allows words to be horizontal, vertical, diagonal, written backwards, or even overlapping other words. It’s a little unusual, though, as you don’t merely need to find one instance of XMAS - you need to find all of them. Here are a few ways XMAS might appear, where irrelevant characters have been replaced with .:</p>
<pre><code>..X...
.SAMX.
.A..A.
XMAS.S
.X....</code></pre>
<p>The actual word search will be full of letters instead. For example:</p>
<pre><code>MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX</code></pre>
<p>In this word search, XMAS occurs a total of 18 times; here’s the same word search again, but where letters not involved in any XMAS have been replaced with .:</p>
<pre><code>....XXMAS.
.SAMXMS...
...S..A...
..A.A.MS.X
XMASAMX.MM
X.....XA.A
S.S.S.S.SS
.A.A.A.A.A
..M.M.M.MM
.X.X.XMASX</code></pre>
<p>Take a look at the little Elf’s word search. How many times does XMAS appear?</p>
</div>
</div>
</div>
<div id="23d60837" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""MMMSXXMASM</span></span>
<span id="cb4-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">MSAMXMSMSA</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">AMXSXMAAMM</span></span>
<span id="cb4-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">MSAMASMSMX</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">XMASAMXAMM</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">XXAMMXXAMA</span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SMSMSASXSS</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SAXAMASAAA</span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">MAMMMXMMMM</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">MXMXAXMASX</span></span>
<span id="cb4-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-12"></span>
<span id="cb4-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb4-14"></span>
<span id="cb4-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> within_grid(x:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, y:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb4-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_X) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_Y)</span>
<span id="cb4-17"></span>
<span id="cb4-18">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> trace(x:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, y:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, dir_x:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, dir_y:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb4-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Given a starting x,y node, trace down `dir` direction</span></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - if out of bounds of wrong letter, end func</span></span>
<span id="cb4-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        - if we found a complete XMAS then update solution set</span></span>
<span id="cb4-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb4-24">        coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>((x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dir_x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dir_y ) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb4-25">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"XMAS"</span></span>
<span id="cb4-26"></span>
<span id="cb4-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x,y) , letter <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(coords, target):</span>
<span id="cb4-28">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> within_grid(x,y):</span>
<span id="cb4-29">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-30">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> grid[x][y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> letter:</span>
<span id="cb4-31">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="cb4-32"></span>
<span id="cb4-33">        solutions.add(coords)</span>
<span id="cb4-34"></span>
<span id="cb4-35"></span>
<span id="cb4-36">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.splitlines()</span>
<span id="cb4-37">    max_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)</span>
<span id="cb4-38">    max_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="cb4-39">    solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb4-40">    DIRECTIONS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb4-41">        (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># North</span></span>
<span id="cb4-42">        (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NE</span></span>
<span id="cb4-43">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># East</span></span>
<span id="cb4-44">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SE</span></span>
<span id="cb4-45">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># South</span></span>
<span id="cb4-46">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SW</span></span>
<span id="cb4-47">        (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># West</span></span>
<span id="cb4-48">        (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NW</span></span>
<span id="cb4-49">    ]</span>
<span id="cb4-50"></span>
<span id="cb4-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_X):</span>
<span id="cb4-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_Y):</span>
<span id="cb4-53">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> grid[x][y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X"</span>:</span>
<span id="cb4-54">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (dir_x, dir_y) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> DIRECTIONS:</span>
<span id="cb4-55">                    trace(x, y, dir_x, dir_y)</span>
<span id="cb4-56"></span>
<span id="cb4-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(solutions)</span>
<span id="cb4-58"></span>
<span id="cb4-59">part1(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>18</code></pre>
</div>
</div>
<div id="ed7645b9" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/04"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb6-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb6-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>2458</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Looking for the instructions, you flip over the word search to find that this isn’t actually an XMAS puzzle; it’s an X-MAS puzzle in which you’re supposed to find two MAS in the shape of an X. One way to achieve that is like this:</p>
<pre><code>M.S
.A.
M.S</code></pre>
<p>Irrelevant characters have again been replaced with . in the above diagram. Within the X, each MAS can be written forwards or backwards.</p>
<p>Here’s the same example from before, but this time all of the X-MASes have been kept instead:</p>
<pre><code>.M.S......
..A..MSMS.
.M.S.MAA..
..A.ASMSM.
.M.S.M....
..........
S.S.S.S.S.
.A.A.A.A..
M.M.M.M.M.
..........</code></pre>
<p>In this example, an X-MAS appears 9 times.</p>
<p>Flip the word search from the instructions back over to the word search side and try again. How many times does an X-MAS appear?</p>
</div>
</div>
</div>
<div id="7d7bfcbb" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-3-4"></span>
<span id="annotated-cell-3-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> within_grid(x:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, y:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="annotated-cell-3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_X) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> (y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_Y)</span>
<span id="annotated-cell-3-7"></span>
<span id="annotated-cell-3-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_corner_letters(x:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, y:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="annotated-cell-3-9"></span>
<span id="annotated-cell-3-10">        DIRECTIONS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="annotated-cell-3-11">            (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NE</span></span>
<span id="annotated-cell-3-12">            (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SE</span></span>
<span id="annotated-cell-3-13">            (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># SW</span></span>
<span id="annotated-cell-3-14">            (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># NW</span></span>
<span id="annotated-cell-3-15">        ]</span>
<span id="annotated-cell-3-16"></span>
<span id="annotated-cell-3-17">        coords <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>( (x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dir_x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dir_y) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (dir_x, dir_y) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> DIRECTIONS)</span>
<span id="annotated-cell-3-18"></span>
<span id="annotated-cell-3-19">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check no corners are out of bounds</span></span>
<span id="annotated-cell-3-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x, y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords:</span>
<span id="annotated-cell-3-21">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> within_grid(x,y):</span>
<span id="annotated-cell-3-22">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span></span>
<span id="annotated-cell-3-23"></span>
<span id="annotated-cell-3-24">        ne, se, sw, nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>(grid[x][y] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> coords)</span>
<span id="annotated-cell-3-25"></span>
<span id="annotated-cell-3-26">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check we see 2S and 2M in the corners</span></span>
<span id="annotated-cell-3-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> Counter((ne,se,sw,nw)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> Counter((<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"M"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"S"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"S"</span>)):</span>
<span id="annotated-cell-3-28">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Exclude edge case where only diagonals are alike</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-29" class="code-annotation-target">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span>(ne <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> sw) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> (nw <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> se):</span>
<span id="annotated-cell-3-30">                solutions.add(coords)</span>
<span id="annotated-cell-3-31"></span>
<span id="annotated-cell-3-32">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.splitlines()</span>
<span id="annotated-cell-3-33">    max_X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)</span>
<span id="annotated-cell-3-34">    max_Y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span>
<span id="annotated-cell-3-35">    solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="annotated-cell-3-36"></span>
<span id="annotated-cell-3-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_X):</span>
<span id="annotated-cell-3-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(max_Y):</span>
<span id="annotated-cell-3-39">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> grid[x][y] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A"</span>:</span>
<span id="annotated-cell-3-40">                check_corner_letters(x,y)</span>
<span id="annotated-cell-3-41"></span>
<span id="annotated-cell-3-42">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(solutions)</span>
<span id="annotated-cell-3-43"></span>
<span id="annotated-cell-3-44">part2(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="29" data-code-annotation="1">Alternatively, this could have been written as <code>ne != sw</code> but I feel the weird <code>not(ne == sw)</code> feels more intuitive. Ie. I want to exclude coords whose diagonal corners match.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>9</code></pre>
</div>
</div>
<div id="e49b70d2" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>1945</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day04.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
<item>
  <title>Day 5: Print Queue</title>
  <link>https://ddanieltan.github.io/aoc2024/day05.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/05.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt:elves waiting in a queue to print pages, cartoon style</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The Elf has for you both the page ordering rules and the pages to produce in each update (your puzzle input), but can’t figure out whether each update has the pages in the right order.</p>
<p>For example:</p>
<pre><code>47|53
97|13
97|61
97|47
75|29
61|13
75|53
29|13
97|29
53|29
61|53
97|53
61|29
47|13
75|47
97|75
47|61
75|61
47|29
75|13
53|13

75,47,61,53,29
97,61,53,29,13
75,29,13
75,97,47,61,53
61,13,29
97,13,75,29,47</code></pre>
<p>The first section specifies the page ordering rules, one per line. The first rule, 47|53, means that if an update includes both page number 47 and page number 53, then page number 47 must be printed at some point before page number 53. (47 doesn’t necessarily need to be immediately before 53; other pages are allowed to be between them.)</p>
<p>The second section specifies the page numbers of each update. Because most safety manuals are different, the pages needed in the updates are different too. The first update, 75,47,61,53,29, means that the update consists of page numbers 75, 47, 61, 53, and 29.</p>
<p>To get the printers going as soon as possible, start by identifying which updates are already in the right order.</p>
<p>In the above example, the first update (75,47,61,53,29) is in the right order:</p>
<ul>
<li>75 is correctly first because there are rules that put each other page after it: 75|47, 75|61, 75|53, and 75|29.</li>
<li>47 is correctly second because 75 must be before it (75|47) and every other page must be after it according to 47|61, 47|53, and 47|29.</li>
<li>61 is correctly in the middle because 75 and 47 are before it (75|61 and 47|61) and 53 and 29 are after it (61|53 and 61|29).</li>
<li>53 is correctly fourth because it is before page number 29 (53|29).</li>
<li>29 is the only page left and so is correctly last.</li>
</ul>
<p>Because the first update does not include some page numbers, the ordering rules involving those missing page numbers are ignored.</p>
<p>The second and third updates are also in the correct order according to the rules. Like the first update, they also do not include every page number, and so only some of the ordering rules apply - within each update, the ordering rules that involve missing page numbers are not used.</p>
<p>The fourth update, 75,97,47,61,53, is not in the correct order: it would print 75 before 97, which violates the rule 97|75.</p>
<p>The fifth update, 61,13,29, is also not in the correct order, since it breaks the rule 29|13.</p>
<p>The last update, 97,13,75,29,47, is not in the correct order due to breaking several rules.</p>
<p>For some reason, the Elves also need to know the middle page number of each update being printed. Because you are currently only printing the correctly-ordered updates, you will need to find the middle page number of each correctly-ordered update. In the above example, the correctly-ordered updates are:</p>
<pre><code>75,47,61,53,29
97,61,53,29,13
75,29,13</code></pre>
<p>These have middle page numbers of 61, 53, and 29 respectively. Adding these page numbers together gives 143.</p>
</div>
</div>
</div>
<div id="83bb4f97" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""47|53</span></span>
<span id="annotated-cell-1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97|13</span></span>
<span id="annotated-cell-1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97|61</span></span>
<span id="annotated-cell-1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97|47</span></span>
<span id="annotated-cell-1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75|29</span></span>
<span id="annotated-cell-1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">61|13</span></span>
<span id="annotated-cell-1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75|53</span></span>
<span id="annotated-cell-1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">29|13</span></span>
<span id="annotated-cell-1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97|29</span></span>
<span id="annotated-cell-1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">53|29</span></span>
<span id="annotated-cell-1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">61|53</span></span>
<span id="annotated-cell-1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97|53</span></span>
<span id="annotated-cell-1-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">61|29</span></span>
<span id="annotated-cell-1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">47|13</span></span>
<span id="annotated-cell-1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75|47</span></span>
<span id="annotated-cell-1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97|75</span></span>
<span id="annotated-cell-1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">47|61</span></span>
<span id="annotated-cell-1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75|61</span></span>
<span id="annotated-cell-1-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">47|29</span></span>
<span id="annotated-cell-1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75|13</span></span>
<span id="annotated-cell-1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">53|13</span></span>
<span id="annotated-cell-1-22"></span>
<span id="annotated-cell-1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75,47,61,53,29</span></span>
<span id="annotated-cell-1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97,61,53,29,13</span></span>
<span id="annotated-cell-1-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75,29,13</span></span>
<span id="annotated-cell-1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">75,97,47,61,53</span></span>
<span id="annotated-cell-1-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">61,13,29</span></span>
<span id="annotated-cell-1-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">97,13,75,29,47</span></span>
<span id="annotated-cell-1-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="annotated-cell-1-30"></span>
<span id="annotated-cell-1-31"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="annotated-cell-1-32"></span>
<span id="annotated-cell-1-33"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>]:</span>
<span id="annotated-cell-1-34">    top, bot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="annotated-cell-1-35"></span>
<span id="annotated-cell-1-36">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bad rules contain all the numbers (values) that cannot come on the left of (key)</span></span>
<span id="annotated-cell-1-37">    bad_rules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="annotated-cell-1-38">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Good rules contain all the numbers (values) that must come on the left of (key) - used in part2</span></span>
<span id="annotated-cell-1-39">    good_rules <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> defaultdict(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>)</span>
<span id="annotated-cell-1-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> t <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> top.splitlines():</span>
<span id="annotated-cell-1-41">        a,b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> t.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"|"</span>)</span>
<span id="annotated-cell-1-42">        bad_rules[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(b)].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(a))</span>
<span id="annotated-cell-1-43">        good_rules[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(a)].append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(b))</span>
<span id="annotated-cell-1-44"></span>
<span id="annotated-cell-1-45">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> bot.splitlines():</span>
<span id="annotated-cell-1-47">        line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> b.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">","</span>)</span>
<span id="annotated-cell-1-48">        line <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(l) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> l <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> line]</span>
<span id="annotated-cell-1-49">        lines.append(line)</span>
<span id="annotated-cell-1-50"></span>
<span id="annotated-cell-1-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> bad_rules, good_rules, lines</span>
<span id="annotated-cell-1-52"></span>
<span id="annotated-cell-1-53"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-1-54">    rules, _, lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="annotated-cell-1-55"></span>
<span id="annotated-cell-1-56">    correct <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-1-57">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines:</span>
<span id="annotated-cell-1-58">        is_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-1-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(line):</span>
<span id="annotated-cell-1-60">            to_the_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-61" class="code-annotation-target">            must_be_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> rules[num]</span>
<span id="annotated-cell-1-62">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> to_the_right <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> must_be_left]):</span>
<span id="annotated-cell-1-63">                is_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-1-64">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="annotated-cell-1-65"></span>
<span id="annotated-cell-1-66">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> is_valid:</span>
<span id="annotated-cell-1-67">            correct.append(line)</span>
<span id="annotated-cell-1-68"></span>
<span id="annotated-cell-1-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume all correct lists are an odd numbered length</span></span>
<span id="annotated-cell-1-70">    medians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> correct]</span>
<span id="annotated-cell-1-71"></span>
<span id="annotated-cell-1-72">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(medians)</span>
<span id="annotated-cell-1-73"></span>
<span id="annotated-cell-1-74">part1(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="61" data-code-annotation="1">Use <code>[]</code> to access values from a defaultdict, not <code>.get()</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>143</code></pre>
</div>
</div>
<div id="cef76fb0" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/05"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb4-3"></span>
<span id="cb4-4">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>4185</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>For each of the incorrectly-ordered updates, use the page ordering rules to put the page numbers in the right order. For the above example, here are the three incorrectly-ordered updates and their correct orderings:</p>
<ul>
<li>75,97,47,61,53 becomes 97,75,47,61,53.</li>
<li>61,13,29 becomes 61,29,13.</li>
<li>97,13,75,29,47 becomes 97,75,47,29,13.</li>
</ul>
<p>After taking only the incorrectly-ordered updates and ordering them correctly, their middle page numbers are 47, 29, and 47. Adding these together produces 123.</p>
<p>Find the updates which are not in the correct order. What do you get if you add up the middle page numbers after correctly ordering just those updates?</p>
</div>
</div>
</div>
<div id="6bd55768" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb6-2">    bad_rules, good_rules, lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb6-3"></span>
<span id="cb6-4">    wrong <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines:</span>
<span id="cb6-6">        is_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb6-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(line):</span>
<span id="cb6-8">            to_the_right <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb6-9">            must_be_left <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> bad_rules[num] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;1&gt; Can't use .get</span></span>
<span id="cb6-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span>([x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> to_the_right <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> must_be_left]):</span>
<span id="cb6-11">                is_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb6-12">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb6-13"></span>
<span id="cb6-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> is_valid:</span>
<span id="cb6-15">            wrong.append(line)</span>
<span id="cb6-16"></span>
<span id="cb6-17"></span>
<span id="cb6-18">    fixed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> wrong:</span>
<span id="cb6-20">        reorder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb6-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(line):</span>
<span id="cb6-22">            score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb6-23">            all_but_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line[:i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> line[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:]</span>
<span id="cb6-24">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_but_num:</span>
<span id="cb6-25">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> good_rules[num]:</span>
<span id="cb6-26">                    score <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-27">            reorder.append((score, num))</span>
<span id="cb6-28"></span>
<span id="cb6-29">        reorder.sort(reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb6-30">        fixed.append([num <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _,num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> reorder])</span>
<span id="cb6-31"></span>
<span id="cb6-32"></span>
<span id="cb6-33">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Assume all correct lists are an odd numbered length</span></span>
<span id="cb6-34">    medians <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [line[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(line)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> fixed]</span>
<span id="cb6-35"></span>
<span id="cb6-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(medians)</span>
<span id="cb6-37">part2(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>123</code></pre>
</div>
</div>
<div id="bcd91262" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>4480</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day05.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
<item>
  <title>Day 6: Guard Gallivant</title>
  <link>https://ddanieltan.github.io/aoc2024/day06.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/06.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt:christmas guard walking in a squarish path which is traced, top down perspective, cartoon style</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>You start by making a map (your puzzle input) of the situation. For example:</p>
<p>….#….. ………# ………. ..#……. …….#.. ………. .#..^….. ……..#. #……… ……#…</p>
<p>The map shows the current position of the guard with ^ (to indicate the guard is currently facing up from the perspective of the map). Any obstructions - crates, desks, alchemical reactors, etc. - are shown as #.</p>
<p>Lab guards in 1518 follow a very strict patrol protocol which involves repeatedly following these steps:</p>
<p>If there is something directly in front of you, turn right 90 degrees. Otherwise, take a step forward. Following the above protocol, the guard moves up several times until she reaches an obstacle (in this case, a pile of failed suit prototypes):</p>
<p>….#….. ….^….# ………. ..#……. …….#.. ………. .#…….. ……..#. #……… ……#…</p>
<p>Because there is now an obstacle in front of the guard, she turns right before continuing straight in her new facing direction:</p>
<p>….#….. ……..&gt;# ………. ..#……. …….#.. ………. .#…….. ……..#. #……… ……#…</p>
<p>Reaching another obstacle (a spool of several very long polymers), she turns right again and continues downward:</p>
<p>….#….. ………# ………. ..#……. …….#.. ………. .#……v. ……..#. #……… ……#…</p>
<p>This process continues for a while, but the guard eventually leaves the mapped area (after walking past a tank of universal solvent):</p>
<p>….#….. ………# ………. ..#……. …….#.. ………. .#…….. ……..#. #……… ……#v..</p>
<p>By predicting the guard’s route, you can determine which specific positions in the lab will be in the patrol path. Including the guard’s starting position, the positions visited by the guard before leaving the area are marked with an X:</p>
<p>….#….. ….XXXXX# ….X…X. ..#.X…X. ..XXXXX#X. ..X.X.X.X. .#XXXXXXX. .XXXXXXX#. #XXXXXXX.. ……#X..</p>
<p>In this example, the guard will visit 41 distinct positions on your map.</p>
<p>Predict the path of the guard. How many distinct positions will the guard visit before leaving the mapped area?</p>
</div>
</div>
</div>
<div id="d264a185" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""....#.....</span></span>
<span id="cb1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.........#</span></span>
<span id="cb1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">..........</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">..#.......</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.......#..</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">..........</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">.#..^.....</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">........#.</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">#.........</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">......#...</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-12"></span>
<span id="cb1-13">DIRECTIONS <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-14">    (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># N -&gt; E</span></span>
<span id="cb1-15">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># E -&gt; S</span></span>
<span id="cb1-16">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) : (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># S -&gt; W</span></span>
<span id="cb1-17">    (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) : (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># W -&gt; N</span></span>
<span id="cb1-18">}</span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]):</span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parse out grid and starting location</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-24">    grid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inp.splitlines()</span>
<span id="cb1-25"></span>
<span id="cb1-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find starting location</span></span>
<span id="cb1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)):</span>
<span id="cb1-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])):</span>
<span id="cb1-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> grid[x][y]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"^"</span>:</span>
<span id="cb1-30">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> grid, (x,y)</span>
<span id="cb1-31"></span>
<span id="cb1-32"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> check_oob(x:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, y:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, grid:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="cb1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid)) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> (y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(grid[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]))</span>
<span id="cb1-34"></span>
<span id="cb1-35"></span>
<span id="cb1-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> trace_path(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>:</span>
<span id="cb1-37">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns visited path and corners</span></span>
<span id="cb1-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-40">    grid, start <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb1-41"></span>
<span id="cb1-42">    path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb1-43">    heading <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start heading N</span></span>
<span id="cb1-44">    x,y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> start</span>
<span id="cb1-45"></span>
<span id="cb1-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb1-47">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Add current node</span></span>
<span id="cb1-48">        path.append((x,y,heading))</span>
<span id="cb1-49"></span>
<span id="cb1-50">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Look ahead to next node</span></span>
<span id="cb1-51">        dx, dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heading</span>
<span id="cb1-52">        xa, ya <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dx, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> dy</span>
<span id="cb1-53">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> check_oob(xa,ya,grid):</span>
<span id="cb1-54">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> path</span>
<span id="cb1-55"></span>
<span id="cb1-56">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Change heading if obstacle</span></span>
<span id="cb1-57">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> grid[xa][ya] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"#"</span>:</span>
<span id="cb1-58">            heading <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DIRECTIONS.get(heading)</span>
<span id="cb1-59"></span>
<span id="cb1-60">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Actually update position</span></span>
<span id="cb1-61">        dx, dy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> heading</span>
<span id="cb1-62">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dx</span>
<span id="cb1-63">        y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> dy</span>
<span id="cb1-64"></span>
<span id="cb1-65"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-66">    path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> trace_path(inp)</span>
<span id="cb1-67">    visited <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([(x,y) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (x,y,heading) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> path])</span>
<span id="cb1-68">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(visited)</span>
<span id="cb1-69"></span>
<span id="cb1-70"></span>
<span id="cb1-71">part1(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>41</code></pre>
</div>
</div>
<div id="467ad51d" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/06"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>4819</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>In the above example, there are only 6 different positions where a new obstruction would cause the guard to get stuck in a loop. The diagrams of these six situations use O to mark the new obstruction, | to show a position where the guard moves up/down, - to show a position where the guard moves left/right, and + to show a position where the guard moves both up/down and left/right.</p>
<p>Option one, put a printing press next to the guard’s starting position:</p>
<p>….#….. ….+—+# ….|…|. ..#.|…|. ….|..#|. ….|…|. .#.O^—+. ……..#. #……… ……#…</p>
<p>Option two, put a stack of failed suit prototypes in the bottom right quadrant of the mapped area:</p>
<p>….#….. ….+—+# ….|…|. ..#.|…|. ..+-+-+#|. ..|.|.|.|. .#+-^-+-+. ……O.#. #……… ……#…</p>
<p>Option three, put a crate of chimney-squeeze prototype fabric next to the standing desk in the bottom right quadrant:</p>
<p>….#….. ….+—+# ….|…|. ..#.|…|. ..+-+-+#|. ..|.|.|.|. .#+-^-+-+. .+—-+O#. #+—-+… ……#…</p>
<p>Option four, put an alchemical retroencabulator near the bottom left corner:</p>
<p>….#….. ….+—+# ….|…|. ..#.|…|. ..+-+-+#|. ..|.|.|.|. .#+-^-+-+. ..|…|.#. #O+—+… ……#…</p>
<p>Option five, put the alchemical retroencabulator a bit to the right instead:</p>
<p>….#….. ….+—+# ….|…|. ..#.|…|. ..+-+-+#|. ..|.|.|.|. .#+-^-+-+. ….|.|.#. #..O+-+… ……#…</p>
<p>Option six, put a tank of sovereign glue right next to the tank of universal solvent:</p>
<p>….#….. ….+—+# ….|…|. ..#.|…|. ..+-+-+#|. ..|.|.|.|. .#+-^-+-+. .+—-++#. #+—-++.. ……#O..</p>
<p>It doesn’t really matter what you choose to use as an obstacle so long as you and The Historians can put it into position without the guard noticing. The important thing is having enough options that you can find one that minimizes time paradoxes, and in this example, there are 6 different positions you could choose.</p>
<p>You need to get the guard stuck in a loop by adding a single new obstruction. How many different positions could you choose for this obstruction?</p>
</div>
</div>
</div>
<div id="e89689fc" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def check_loop(grid, start, path, obstacle) -&gt; bool:</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     heading = (-1,0) # Start heading N</span></span>
<span id="cb5-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     x,y = start</span></span>
<span id="cb5-5"></span>
<span id="cb5-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     while True:</span></span>
<span id="cb5-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         print("checking", x,y, heading)</span></span>
<span id="cb5-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         # Look ahead to next node</span></span>
<span id="cb5-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         dx, dy = heading</span></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         xa, ya = x + dx, y + dy</span></span>
<span id="cb5-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         if check_oob(xa,ya,grid):</span></span>
<span id="cb5-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             print("oob")</span></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             return False</span></span>
<span id="cb5-14"></span>
<span id="cb5-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         # Change heading if obstacle</span></span>
<span id="cb5-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         if (grid[xa][ya] == "#"):</span></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             print("change dir")</span></span>
<span id="cb5-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             heading = DIRECTIONS.get(heading)</span></span>
<span id="cb5-19"></span>
<span id="cb5-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         # Check if obstacle directs back to existing path</span></span>
<span id="cb5-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         if (xa, ya) == obstacle:</span></span>
<span id="cb5-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             heading = DIRECTIONS.get(heading)</span></span>
<span id="cb5-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             dx, dy = heading</span></span>
<span id="cb5-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             x += dx</span></span>
<span id="cb5-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             y += dy</span></span>
<span id="cb5-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             if (x, y, heading) in path:</span></span>
<span id="cb5-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 return True</span></span>
<span id="cb5-28"></span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         # Actually update position</span></span>
<span id="cb5-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         dx, dy = heading</span></span>
<span id="cb5-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         x += dx</span></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         y += dy</span></span>
<span id="cb5-34"></span>
<span id="cb5-35"></span>
<span id="cb5-36"></span>
<span id="cb5-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># def part2(inp:str) -&gt; int:</span></span>
<span id="cb5-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     grid, start = parse(inp)</span></span>
<span id="cb5-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     path = trace_path(inp)</span></span>
<span id="cb5-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     visited = set([(x,y) for (x,y,heading) in path[1:]]) # remove start</span></span>
<span id="cb5-41"></span>
<span id="cb5-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # Candidate obstacles except start</span></span>
<span id="cb5-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     # obstacles = path[1:]</span></span>
<span id="cb5-44"></span>
<span id="cb5-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     loops = 0</span></span>
<span id="cb5-46"></span>
<span id="cb5-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     for obstacle in visited:</span></span>
<span id="cb5-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         while True:</span></span>
<span id="cb5-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             x,y = start</span></span>
<span id="cb5-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             heading = (-1, 0)</span></span>
<span id="cb5-51"></span>
<span id="cb5-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             # Look ahead to next node</span></span>
<span id="cb5-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             dx, dy = heading</span></span>
<span id="cb5-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             xa, ya = x + dx, y + dy</span></span>
<span id="cb5-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             if check_oob(xa,ya,grid):</span></span>
<span id="cb5-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 break</span></span>
<span id="cb5-57"></span>
<span id="cb5-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             # Change heading if obstacle</span></span>
<span id="cb5-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             if (grid[xa][ya] == "#") or ((xa,ya) == obstacle) :</span></span>
<span id="cb5-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 heading = DIRECTIONS.get(heading)</span></span>
<span id="cb5-61"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 continue</span></span>
<span id="cb5-62"></span>
<span id="cb5-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             # Actually update position</span></span>
<span id="cb5-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             dx, dy = heading</span></span>
<span id="cb5-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             x += dx</span></span>
<span id="cb5-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             y += dy</span></span>
<span id="cb5-67"></span>
<span id="cb5-68"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             # Check if loop</span></span>
<span id="cb5-69"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             if (x,y, heading) in path[1:]:</span></span>
<span id="cb5-70"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 loops += 1</span></span>
<span id="cb5-71"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#                 break</span></span>
<span id="cb5-72"></span>
<span id="cb5-73"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     return loops</span></span>
<span id="cb5-74"></span>
<span id="cb5-75"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># part2(eg)</span></span></code></pre></div>
</div>
<p>….#….. ….XXXXX# ….X…X. ..#.X…X. ..XXXXX#X. ..X.X.X.X. .#XXXXXXX. .XXXXXXX#. #XXXXXXX.. ……#X..</p>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day06.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
<item>
  <title>Day 7: Bridge Repair</title>
  <link>https://ddanieltan.github.io/aoc2024/day07.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/07.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt:elves trying to fix a bridge, with a lot of numbers floating, cartoon style</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<pre><code>190: 10 19
3267: 81 40 27
83: 17 5
156: 15 6
7290: 6 8 6 15
161011: 16 10 13
192: 17 8 14
21037: 9 7 18 13
292: 11 6 16 20</code></pre>
<p>Each line represents a single equation. The test value appears before the colon on each line; it is your job to determine whether the remaining numbers can be combined with operators to produce the test value.</p>
<p>Operators are always evaluated left-to-right, not according to precedence rules. Furthermore, numbers in the equations cannot be rearranged. Glancing into the jungle, you can see elephants holding two different types of operators: add (+) and multiply (*).</p>
<p>Only three of the above equations can be made true by inserting operators:</p>
<ul>
<li>190: 10 19 has only one position that accepts an operator: between 10 and 19. Choosing + would give 29, but choosing * would give the test value (10 * 19 = 190).</li>
<li>3267: 81 40 27 has two positions for operators. Of the four possible configurations of the operators, two cause the right side to match the test value: 81 + 40 * 27 and 81 * 40 + 27 both equal 3267 (when evaluated left-to-right)!</li>
<li>292: 11 6 16 20 can be solved in exactly one way: 11 + 6 * 16 + 20. The engineers just need the total calibration result, which is the sum of the test values from just the equations that could possibly be true. In the above example, the sum of the test values for the three equations listed above is 3749.</li>
</ul>
<p>Determine which equations could possibly be true. What is their total calibration result?</p>
</div>
</div>
</div>
<div id="c37bcdbd" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""190: 10 19</span></span>
<span id="annotated-cell-1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3267: 81 40 27</span></span>
<span id="annotated-cell-1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">83: 17 5</span></span>
<span id="annotated-cell-1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">156: 15 6</span></span>
<span id="annotated-cell-1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">7290: 6 8 6 15</span></span>
<span id="annotated-cell-1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">161011: 16 10 13</span></span>
<span id="annotated-cell-1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">192: 17 8 14</span></span>
<span id="annotated-cell-1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">21037: 9 7 18 13</span></span>
<span id="annotated-cell-1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">292: 11 6 16 20</span></span>
<span id="annotated-cell-1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="annotated-cell-1-11"></span>
<span id="annotated-cell-1-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> product</span>
<span id="annotated-cell-1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> operator</span>
<span id="annotated-cell-1-14"></span>
<span id="annotated-cell-1-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>])]:</span>
<span id="annotated-cell-1-16">    ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-1-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inp.splitlines():</span>
<span id="annotated-cell-1-18">        front, back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span>)</span>
<span id="annotated-cell-1-19">        target <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(front)</span>
<span id="annotated-cell-1-20">        nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> back.split()]</span>
<span id="annotated-cell-1-21"></span>
<span id="annotated-cell-1-22">        ret.append((target, nums))</span>
<span id="annotated-cell-1-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ret</span>
<span id="annotated-cell-1-24"></span>
<span id="annotated-cell-1-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-1-26">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="annotated-cell-1-27">    solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-28" class="code-annotation-target">    operators <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (operator.mul, operator.add)</span>
<span id="annotated-cell-1-29"></span>
<span id="annotated-cell-1-30">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target, nums <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines:</span>
<span id="annotated-cell-1-31">        slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-32"></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-1-33" class="code-annotation-target">        ops_variations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product(operators, repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>slots)</span>
<span id="annotated-cell-1-34"></span>
<span id="annotated-cell-1-35">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ops <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ops_variations:</span>
<span id="annotated-cell-1-36">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="annotated-cell-1-37">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, op <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ops):</span>
<span id="annotated-cell-1-38">                result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> op(result, nums[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="annotated-cell-1-39"></span>
<span id="annotated-cell-1-40">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target:</span>
<span id="annotated-cell-1-41">                solutions.append(target)</span>
<span id="annotated-cell-1-42">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="annotated-cell-1-43"></span>
<span id="annotated-cell-1-44">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(solutions)</span>
<span id="annotated-cell-1-45"></span>
<span id="annotated-cell-1-46">part1(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="28,38" data-code-annotation="1">Learnt about the <a href="https://docs.python.org/3/library/operator.html"><code>operator</code> module</a>, which is very useful because it allows one to use functions/objects to perform basic operations which makes it easier to script. I was previously using <code>eval(...)</code> which feels a lot less safe.</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="33" data-code-annotation="2">Reminder that <code>itertools.product</code> produces variations where inputs can be repeated by the function. <code>itertools.permutations</code> produces variations where inputs cannot be repeated.</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>3749</code></pre>
</div>
</div>
<div id="ede7489e" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/07"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>6083020304036</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The concatenation operator (||) combines the digits from its left and right inputs into a single number. For example, 12 || 345 would become 12345. All operators are still evaluated left-to-right.</p>
<p>Now, apart from the three equations that could be made true using only addition and multiplication, the above example has three more equations that can be made true by inserting operators:</p>
<ul>
<li>156: 15 6 can be made true through a single concatenation: 15 || 6 = 156.</li>
<li>7290: 6 8 6 15 can be made true using 6 * 8 || 6 * 15.</li>
<li>192: 17 8 14 can be made true using 17 || 8 + 14.</li>
</ul>
<p>Adding up all six test values (the three that could be made before using only + and * plus the new three that can now be made by also using ||) produces the new total calibration result of 11387.</p>
<p>Using your new knowledge of elephant hiding spots, determine which equations could possibly be true. What is their total calibration result?</p>
</div>
</div>
</div>
<div id="f87dc783" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> concat(a:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, b:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(b))</span>
<span id="cb5-3"></span>
<span id="cb5-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb5-5">    lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb5-6">    solutions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-7">    operators <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (operator.mul, operator.add, concat)</span>
<span id="cb5-8"></span>
<span id="cb5-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> target, nums <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines:</span>
<span id="cb5-10">        slots <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nums) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb5-11"></span>
<span id="cb5-12">        ops_variations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> product(operators, repeat<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>slots)</span>
<span id="cb5-13"></span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ops <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ops_variations:</span>
<span id="cb5-15">            result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nums[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-16">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, op <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(ops):</span>
<span id="cb5-17">                result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> op(result, nums[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>])</span>
<span id="cb5-18"></span>
<span id="cb5-19">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> target:</span>
<span id="cb5-20">                solutions.append(target)</span>
<span id="cb5-21">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="cb5-22"></span>
<span id="cb5-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(solutions)</span>
<span id="cb5-24"></span>
<span id="cb5-25">part2(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>11387</code></pre>
</div>
</div>
<div id="51ed7e4f" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>59002246504791</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day07.html</guid>
  <pubDate>Sat, 07 Dec 2024 18:26:14 GMT</pubDate>
</item>
</channel>
</rss>
