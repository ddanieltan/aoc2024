<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Advent of Code 2024</title>
<link>https://ddanieltan.github.io/aoc2024/</link>
<atom:link href="https://ddanieltan.github.io/aoc2024/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Tue, 03 Dec 2024 08:00:39 GMT</lastBuildDate>
<item>
  <title>Day 1: Historian Hysteria</title>
  <link>https://ddanieltan.github.io/aoc2024/day01.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/01.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt: christmas red and green, photo of confused historian holding 2 lists of numeric numbers</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There’s just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren’t very similar. Maybe you can help The Historians reconcile their lists?</p>
<p>For example:</p>
<pre><code>3   4
4   3
2   5
1   3
3   9
3   3</code></pre>
<p>Maybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.</p>
<p>Within each pair, figure out how far apart the two numbers are; you’ll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.</p>
<p>In the example list above, the pairs and distances would be as follows:</p>
<ul>
<li>The smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.</li>
<li>The second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.</li>
<li>The third-smallest number in both lists is 3, so the distance between them is 0.</li>
<li>The next numbers to pair up are 3 and 4, a distance of 1.</li>
<li>The fifth-smallest numbers in each list are 3 and 5, a distance of 2.</li>
<li>Finally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.</li>
</ul>
<p>To find the total distance between the left list and the right list, add up the distances between all of the pairs you found. In the example above, this is 2 + 1 + 0 + 1 + 2 + 5, a total distance of 11!</p>
<p>Your actual left and right lists contain many location IDs. What is the total distance between your lists?</p>
</div>
</div>
</div>
<div id="de7521fc" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""3   4</span></span>
<span id="cb2-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">4   3</span></span>
<span id="cb2-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">2   5</span></span>
<span id="cb2-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1   3</span></span>
<span id="cb2-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3   9</span></span>
<span id="cb2-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">3   3</span></span>
<span id="cb2-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">tuple</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>], <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]:</span>
<span id="cb2-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Parse input into 2 lists</span></span>
<span id="cb2-11">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb2-12">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>()</span>
<span id="cb2-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inp.splitlines():</span>
<span id="cb2-14">        a, b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split()</span>
<span id="cb2-15">        A.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(a))</span>
<span id="cb2-16">        B.append(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(b))</span>
<span id="cb2-17"></span>
<span id="cb2-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort and zip</span></span>
<span id="cb2-19">    A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(A)</span>
<span id="cb2-20">    B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(B)</span>
<span id="cb2-21"></span>
<span id="cb2-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (A,B)</span>
<span id="cb2-23"></span>
<span id="cb2-24"></span>
<span id="cb2-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb2-26">    A,B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb2-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>b) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a,b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(A,B)])</span>
<span id="cb2-28"></span>
<span id="cb2-29"></span>
<span id="cb2-30">part1(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>11</code></pre>
</div>
</div>
<div id="4f0e6db6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/01"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb4-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>1646452</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>This time, you’ll need to figure out exactly how often each number from the left list appears in the right list. Calculate a total similarity score by adding up each number in the left list after multiplying it by the number of times that number appears in the right list.</p>
<p>For these example lists, here is the process of finding the similarity score:</p>
<ul>
<li>The first number in the left list is 3. It appears in the right list three times, so the similarity score increases by 3 * 3 = 9.</li>
<li>The second number in the left list is 4. It appears in the right list once, so the similarity score increases by 4 * 1 = 4.</li>
<li>The third number in the left list is 2. It does not appear in the right list, so the similarity score does not increase (2 * 0 = 0).</li>
<li>The fourth number, 1, also does not appear in the right list.</li>
<li>The fifth number, 3, appears in the right list three times; the similarity score increases by 9.</li>
<li>The last number, 3, appears in the right list three times; the similarity score again increases by 9.</li>
</ul>
<p>So, for these example lists, the similarity score at the end of this process is 31 (9 + 4 + 0 + 0 + 9 + 9).</p>
<p>Once again consider your left and right lists. What is their similarity score?</p>
</div>
</div>
</div>
<div id="2b454390" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb6-4">    A, B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="cb6-5">    cnts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(B)</span>
<span id="cb6-6">    calc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> cnts.get(a,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> A]</span>
<span id="cb6-7"></span>
<span id="cb6-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(calc)</span>
<span id="cb6-9"></span>
<span id="cb6-10">part2(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>31</code></pre>
</div>
</div>
<div id="df63fb31" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>23609874</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day01.html</guid>
  <pubDate>Tue, 03 Dec 2024 08:00:39 GMT</pubDate>
</item>
<item>
  <title>Day 2: Red-Nosed Reports</title>
  <link>https://ddanieltan.github.io/aoc2024/day02.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/02.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt:red nose reindeer who is holding a clipboard with checklist and looking at a nuclear reactor with nuke logo</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:</p>
<pre><code>7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9</code></pre>
<p>This example data contains six reports each containing five levels.</p>
<p>The engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:</p>
<ul>
<li>The levels are either all increasing or all decreasing.</li>
<li>Any two adjacent levels differ by at least one and at most three.</li>
</ul>
<p>In the example above, the reports can be found safe or unsafe by checking those rules:</p>
<ul>
<li>7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.</li>
<li>1 2 7 8 9: Unsafe because 2 7 is an increase of 5.</li>
<li>9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.</li>
<li>1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.</li>
<li>8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.</li>
<li>1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.</li>
</ul>
<p>So, in this example, 2 reports are safe.</p>
<p>Analyze the unusual data from the engineers. How many reports are safe?</p>
</div>
</div>
</div>
<div id="69ebba47" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""7 6 4 2 1</span></span>
<span id="annotated-cell-1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 2 7 8 9</span></span>
<span id="annotated-cell-1-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">9 7 6 2 1</span></span>
<span id="annotated-cell-1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 3 2 4 5</span></span>
<span id="annotated-cell-1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">8 6 4 4 1</span></span>
<span id="annotated-cell-1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">1 3 6 7 9</span></span>
<span id="annotated-cell-1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="annotated-cell-1-8"></span>
<span id="annotated-cell-1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> parse(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]]:</span>
<span id="annotated-cell-1-10">    res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-1-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> inp.splitlines():</span>
<span id="annotated-cell-1-12">        row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line.split()</span>
<span id="annotated-cell-1-13">        res.append([<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(x) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row])</span>
<span id="annotated-cell-1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> res</span>
<span id="annotated-cell-1-15"></span>
<span id="annotated-cell-1-16"></span>
<span id="annotated-cell-1-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cond1(row:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="annotated-cell-1-18">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Condition 1: Always inc or dec</span></span>
<span id="annotated-cell-1-19">    inc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row)</span>
<span id="annotated-cell-1-20">    dec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sorted</span>(row, reverse<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-1-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(row, inc)]) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> r,x <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(row, dec)])</span>
<span id="annotated-cell-1-22"></span>
<span id="annotated-cell-1-23"></span>
<span id="annotated-cell-1-24"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cond2(row:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>:</span>
<span id="annotated-cell-1-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Condition 2: Delta between 1-3</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-1-26" class="code-annotation-target">    pairs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(row, row[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="annotated-cell-1-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>y) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> x,y <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pairs])</span>
<span id="annotated-cell-1-28"></span>
<span id="annotated-cell-1-29"></span>
<span id="annotated-cell-1-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-1-31">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="annotated-cell-1-32">    cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="annotated-cell-1-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rows:</span>
<span id="annotated-cell-1-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cond1(row) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> cond2(row):</span>
<span id="annotated-cell-1-35">            cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-1-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cnt</span>
<span id="annotated-cell-1-37"></span>
<span id="annotated-cell-1-38">part1(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="26" data-code-annotation="1">Reminder that <code>zip</code> can take inputs of different lengths without error, so I can pass <code>row</code> instead of <code>row[:-1]</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>2</code></pre>
</div>
</div>
<div id="2b7b3055" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/02"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>269</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.</p>
<p>More of the above example’s reports are now safe:</p>
<ul>
<li>7 6 4 2 1: Safe without removing any level.</li>
<li>1 2 7 8 9: Unsafe regardless of which level is removed.</li>
<li>9 7 6 2 1: Unsafe regardless of which level is removed.</li>
<li>1 3 2 4 5: Safe by removing the second level, 3.</li>
<li>8 6 4 4 1: Safe by removing the third level, 4.</li>
<li>1 3 6 7 9: Safe without removing any level.</li>
</ul>
<p>Thanks to the Problem Dampener, 4 reports are actually safe!</p>
</div>
</div>
</div>
<div id="2b587813" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-3-2">    rows <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parse(inp)</span>
<span id="annotated-cell-3-3">    cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="annotated-cell-3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> rows:</span>
<span id="annotated-cell-3-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if original full row passes</span></span>
<span id="annotated-cell-3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cond1(row) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> cond2(row):</span>
<span id="annotated-cell-3-7">            cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-8" class="code-annotation-target">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="annotated-cell-3-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check if shortened rows pass</span></span>
<span id="annotated-cell-3-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(row)):</span>
<span id="annotated-cell-3-11">            short_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row.copy()</span>
<span id="annotated-cell-3-12">            short_row.pop(i)</span>
<span id="annotated-cell-3-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cond1(short_row) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> cond2(short_row):</span>
<span id="annotated-cell-3-14">                cnt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="annotated-cell-3-15">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span>
<span id="annotated-cell-3-16"></span>
<span id="annotated-cell-3-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> cnt</span>
<span id="annotated-cell-3-18"></span>
<span id="annotated-cell-3-19"></span>
<span id="annotated-cell-3-20">part2(eg)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="8,15" data-code-annotation="1">Good refresher on the difference between <code>continue</code> and <code>break</code></span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>4</code></pre>
</div>
</div>
<div id="78cb64b3" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>337</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day02.html</guid>
  <pubDate>Tue, 03 Dec 2024 08:00:39 GMT</pubDate>
</item>
<item>
  <title>Day 3: Mull It Over</title>
  <link>https://ddanieltan.github.io/aoc2024/day03.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ddanieltan.github.io/aoc2024/images/03.webp" class="img-fluid figure-img" width="500"></p>
<figcaption>Prompt: Computer with screen filled with random numbers, letter and digits. Highlight on the letters “mul”. Cartoon style in christmas colours</figcaption>
</figure>
</div>
<section id="part-1" class="level2">
<h2 class="anchored" data-anchor-id="part-1">Part 1</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>The computer appears to be trying to run a program, but its memory (your puzzle input) is corrupted. All of the instructions have been jumbled up!</p>
<p>It seems like the goal of the program is just to multiply some numbers. It does that with instructions like mul(X,Y), where X and Y are each 1-3 digit numbers. For instance, mul(44,46) multiplies 44 by 46 to get a result of 2024. Similarly, mul(123,4) would multiply 123 by 4.</p>
<p>However, because the program’s memory has been corrupted, there are also many invalid characters that should be ignored, even if they look like part of a mul instruction. Sequences like mul(4*, mul(6,9!, ?(12,34), or mul ( 2 , 4 ) do nothing.</p>
<p>For example, consider the following section of corrupted memory:</p>
<p><code>xmul(2,4)%&amp;mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))</code></p>
<p>Only the four highlighted sections are real mul instructions. Adding up the result of each instruction produces 161 (2<em>4 + 5</em>5 + 11<em>8 + 8</em>5).</p>
<p>Scan the corrupted memory for uncorrupted mul instructions. What do you get if you add up all of the results of the multiplications?</p>
</div>
</div>
</div>
<div id="8ca30e49" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> re</span>
<span id="cb1-2"></span>
<span id="cb1-3">eg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xmul(2,4)%&amp;mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"</span></span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part1(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="cb1-6"></span>
<span id="cb1-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract mul(x,y) instances</span></span>
<span id="cb1-8">    pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"mul\(\d+,\d+\)"</span></span>
<span id="cb1-9">    instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, inp)</span>
<span id="cb1-10"></span>
<span id="cb1-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract numbers in each instruction and multiply</span></span>
<span id="cb1-12">    pattern_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+"</span></span>
<span id="cb1-13">    nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [re.findall(pattern_nums, i) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> instructions ]</span>
<span id="cb1-14">    products <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums]</span>
<span id="cb1-15"></span>
<span id="cb1-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(products)</span>
<span id="cb1-17"></span>
<span id="cb1-18">part1(eg)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<pre><code>161</code></pre>
</div>
</div>
<div id="e51ce5d6" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inputs/03"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"r"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb3-2">    inp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> f.read()</span>
<span id="cb3-3"></span>
<span id="cb3-4">part1(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>178794710</code></pre>
</div>
</div>
</section>
<section id="part-2" class="level2">
<h2 class="anchored" data-anchor-id="part-2">Part 2</h2>
<div class="callout callout-style-default callout-note callout-titled" title="Puzzle Info">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Puzzle Info
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>There are two new instructions you’ll need to handle:</p>
<p>The do() instruction enables future mul instructions. The don’t() instruction disables future mul instructions. Only the most recent do() or don’t() instruction applies. At the beginning of the program, mul instructions are enabled.</p>
<p>For example:</p>
<p><code>xmul(2,4)&amp;mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))</code></p>
<p>This corrupted memory is similar to the example from before, but this time the mul(5,5) and mul(11,8) instructions are disabled because there is a don’t() instruction before them. The other mul instructions function normally, including the one at the end that gets re-enabled by a do() instruction.</p>
<p>This time, the sum of the results is 48 (2<em>4 + 8</em>5).</p>
<p>Handle the new instructions; what do you get if you add up all of the results of just the enabled multiplications?</p>
</div>
</div>
</div>
<div id="51f2c464" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1">eg2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"xmul(2,4)&amp;mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"</span></span>
<span id="annotated-cell-3-2"></span>
<span id="annotated-cell-3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> part2(inp:<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>:</span>
<span id="annotated-cell-3-4"></span>
<span id="annotated-cell-3-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Extract mul(x,y) or don't() or do()</span></span>
<span id="annotated-cell-3-6">    pattern <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"mul\(\d+,\d+\)|don\'t\(\)|do\(\)"</span></span>
<span id="annotated-cell-3-7">    instructions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> re.findall(pattern, inp)</span>
<span id="annotated-cell-3-8"></span>
<span id="annotated-cell-3-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Find valid calcs</span></span>
<span id="annotated-cell-3-10">    calcs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-3-11">    valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="annotated-cell-3-12"></span>
<span id="annotated-cell-3-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> instructions:</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1" onclick="event.preventDefault();">1</a><span id="annotated-cell-3-14" class="code-annotation-target">        match (i, valid):</span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="2" onclick="event.preventDefault();">2</a><span id="annotated-cell-3-15" class="code-annotation-target">            case (_, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mul"</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> i:</span>
<span id="annotated-cell-3-16">                calcs.append(i)</span>
<span id="annotated-cell-3-17">            case (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"don't()"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>):</span>
<span id="annotated-cell-3-18">                valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="annotated-cell-3-19">            case (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"do()"</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="annotated-cell-3-20">                valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<a class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="3" onclick="event.preventDefault();">3</a><span id="annotated-cell-3-21" class="code-annotation-target">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">case</span> _:</span>
<span id="annotated-cell-3-22">                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#print(f"Unexpected case : {i, valid} ")</span></span>
<span id="annotated-cell-3-23">                ...</span>
<span id="annotated-cell-3-24"></span>
<span id="annotated-cell-3-25">    pattern_nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"\d+"</span></span>
<span id="annotated-cell-3-26">    nums <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [re.findall(pattern_nums, c) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> calcs ]</span>
<span id="annotated-cell-3-27">    products <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> nums]</span>
<span id="annotated-cell-3-28"></span>
<span id="annotated-cell-3-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(products)</span>
<span id="annotated-cell-3-30"></span>
<span id="annotated-cell-3-31">part2(eg2)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<div class="cell-annotation">
<dl class="code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="14" data-code-annotation="1">Good opportunity to use case matching. Recall like Scala, <code>_</code> represents a catchall</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="15" data-code-annotation="2">Example of how to chain an <code>if</code> check after a case match</span>
</dd>
<dt data-target-cell="annotated-cell-3" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="21" data-code-annotation="3">Since we’re using case matching, build the habit of catching all unexpected cases (even if there’s no action required for these cases)</span>
</dd>
</dl>
</div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>48</code></pre>
</div>
</div>
<div id="0ebd9f07" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">part2(inp)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>76729637</code></pre>
</div>
</div>


</section>

 ]]></description>
  <guid>https://ddanieltan.github.io/aoc2024/day03.html</guid>
  <pubDate>Tue, 03 Dec 2024 08:00:39 GMT</pubDate>
</item>
</channel>
</rss>
