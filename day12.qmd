---
title: "Day 12: Garden Groups"
---

![Prompt: christmas elves in a grid where every cell is a different letter and different colour, cartoon style](images/12.webp){width="500" fig-align="center"}

## Part 1

::: {.callout-note title="Puzzle Info" collapse="true"}
Each garden plot grows only a single type of plant and is indicated by a single letter on your map. When multiple garden plots are growing the same type of plant and are touching (horizontally or vertically), they form a region. For example:
```
AAAA
BBCD
BBCC
EEEC
```
This 4x4 arrangement includes garden plots growing five different types of plants (labeled A, B, C, D, and E), each grouped into their own region.

In order to accurately calculate the cost of the fence around a single region, you need to know that region's area and perimeter.

The area of a region is simply the number of garden plots the region contains. The above map's type A, B, and C plants are each in a region of area 4. The type E plants are in a region of area 3; the type D plants are in a region of area 1.

Each garden plot is a square and so has four sides. The perimeter of a region is the number of sides of garden plots in the region that do not touch another garden plot in the same region. The type A and C plants are each in a region with perimeter 10. The type B and E plants are each in a region with perimeter 8. The lone D plot forms its own region with perimeter 4.

Here's a larger example:
```
RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE
```
It contains:

- A region of R plants with price 12 * 18 = 216.
- A region of I plants with price 4 * 8 = 32.
- A region of C plants with price 14 * 28 = 392.
- A region of F plants with price 10 * 18 = 180.
- A region of V plants with price 13 * 20 = 260.
- A region of J plants with price 11 * 20 = 220.
- A region of C plants with price 1 * 4 = 4.
- A region of E plants with price 13 * 18 = 234.
- A region of I plants with price 14 * 22 = 308.
- A region of M plants with price 5 * 12 = 60.
- A region of S plants with price 3 * 8 = 24.

So, it has a total price of 1930.

What is the total price of fencing all regions on your map?
:::

```{python}
eg = """RRRRIICCFF
RRRRIICCCF
VVRRRCCFFF
VVRCCCJFFF
VVVVCJJCFE
VVIVCCJJEE
VVIIICJJEE
MIIIIIJJEE
MIIISIJEEE
MMMISSJEEE
"""

def parse(inp:str) -> list[list[str]]:
    return [[ch for ch in line] for line in inp.splitlines()]

def part1(inp:str) -> int:
    grid = parse(inp)
    in_bounds = lambda x, y: (x>=0) and (x<len(grid)) and (y>=0) and (y<len(grid[0]))
    directions = [(-1,0),(0,1),(1,0),(0,-1)]
    processed = set()

    def dfs(x, y) -> set:
        """
        Given a starting x,y search neighbours
        until we have all coords for this region
        """
        queue = set()
        coords = set()
        letter = grid[x][y]
        queue.add((x,y))
        while queue:
            x, y = queue.pop()
            coords.add((x,y))
            processed.add((x,y))
            for (dx, dy) in directions:
                nx, ny = x+dx, y+dy
                if in_bounds(nx,ny) and ((nx,ny) not in processed) and grid[nx][ny] == letter:
                    queue.add((nx, ny))
        return coords

    def perimeter(coords:set[tuple[int,int]]) -> int:
        """
        Calculate the perimeter of a region
        """
        perimeter = 0
        for (x,y) in coords:
            for (dx, dy) in directions:
                nx, ny = x+dx, y+dy
                if ((nx, ny) not in coords) or (not in_bounds(nx,ny)):
                    perimeter += 1
        return perimeter

    prices = []
    for x in range(len(grid)):
        for y in range(len(grid[0])):
            if (x,y) not in processed:
                coords = dfs(x,y)
                area = len(coords)
                p = perimeter(coords)
                prices.append((area, p))

    return sum([area * peri for (area, peri) in prices])

part1(eg)
```

```{python}
with open("inputs/12", "r") as f:
    inp = f.read()
part1(inp)
```
## Part 2

::: {.callout-note title="Puzzle Info" collapse="true"}
Under the bulk discount, instead of using the perimeter to calculate the price, youneed to use the number of sides each region has. Each straight section of fence counts as a side, regardless of how long it is.

Consider this example again:
```
AAAA
BBCD
BBCC
EEEC
```
The region containing type A plants has 4 sides, as does each of the regions containing plants of type B, D, and E. However, the more complex region containing the plants of type C has 8 sides!

Using the new method of calculating the per-region price by multiplying the region's area by its number of sides, regions A through E have prices 16, 16, 32, 4, and 12, respectively, for a total price of 80.

The second example above (full of type X and O plants) would have a total price of 436.

Here's a map that includes an E-shaped region full of type E plants:
```
EEEEE
EXXXX
EEEEE
EXXXX
EEEEE
```
The E-shaped region has an area of 17 and 12 sides for a price of 204. Including the two regions full of type X plants, this map has a total price of 236.

This map has a total price of 368:
```
AAAAAA
AAABBA
AAABBA
ABBAAA
ABBAAA
AAAAAA
```
It includes two regions full of type B plants (each with 4 sides) and a single region full of type A plants (with 4 sides on the outside and 8 more sides on the inside, a total of 12 sides). Be especially careful when counting the fence around regions like the one full of type A plants; in particular, each section of fence has an in-side and an out-side, so the fence does not connect across the middle of the region (where the two B regions touch diagonally). (The Elves would have used the MÃ¶bius Fencing Company instead, but their contract terms were too one-sided.)

The larger example from before now has the following updated prices:

- A region of R plants with price 12 * 10 = 120.
- A region of I plants with price 4 * 4 = 16.
- A region of C plants with price 14 * 22 = 308.
- A region of F plants with price 10 * 12 = 120.
- A region of V plants with price 13 * 10 = 130.
- A region of J plants with price 11 * 12 = 132.
- A region of C plants with price 1 * 4 = 4.
- A region of E plants with price 13 * 8 = 104.
- A region of I plants with price 14 * 16 = 224.
- A region of M plants with price 5 * 6 = 30.
- A region of S plants with price 3 * 6 = 18.

Adding these together produces its new total price of 1206.

What is the new total price of fencing all regions on your map?
:::

```{python}
def part2(inp:str) -> int:
    grid = parse(inp)
    in_bounds = lambda x, y: (x>=0) and (x<len(grid)) and (y>=0) and (y<len(grid[0]))
    directions = [(-1,0),(0,1),(1,0),(0,-1)]
    processed = set()

    def dfs(x, y) -> set:
        """
        Given a starting x,y search neighbours
        until we have all coords for this region
        """
        queue = set()
        coords = set()
        letter = grid[x][y]
        queue.add((x,y))
        while queue:
            x, y = queue.pop()
            coords.add((x,y))
            processed.add((x,y))
            for (dx, dy) in directions:
                nx, ny = x+dx, y+dy
                if in_bounds(nx,ny) and ((nx,ny) not in processed) and grid[nx][ny] == letter:
                    queue.add((nx, ny))
        return coords

    # Count of corners = Count of sides # <1>
    def count_corners(coords:set[tuple[int,int]]) -> int:
        corners = 0
        neighbours = [
            ((0,-1),(-1,-1),(-1,0)), # w, nw, n
            ((-1,0),(-1,1),(0,1)), # n, ne, e
            ((0,1),(1,1),(1,0)), # e, se, s
            ((1,0),(1,-1),(0,-1)) # s, sw, w
        ]

        for (x,y) in coords:
            for ((ax,ay),(bx,by),(cx,cy)) in neighbours:
                a = (x + ax, y + ay)
                b = (x + bx, y + by)
                c = (x + cx, y + cy)

                # 2 scenarios that indicate current node is a corner # <2>
                cond1 = ((a not in coords) and (c not in coords)) # outer corner
                cond2 = ((b not in coords) and (a in coords) and (c in coords)) # inner corner

                if cond1 or cond2:
                    corners += 1

        return corners

    prices = []
    for x in range(len(grid)):
        for y in range(len(grid[0])):
            if (x,y) not in processed:
                coords = dfs(x,y)
                area = len(coords)
                sides = count_corners(coords)
                prices.append((area, sides))

    return sum([area * sides for (area, sides) in prices])

part2(eg)
```
1. That the count of corners = count of sides is the crucial observation that makes part 2 approachable.
2. Needed to get a pen and paper out to draw this relationship.

```{python}
part2(inp)
```
