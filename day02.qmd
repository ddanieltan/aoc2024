---
title: "Day 2: Red-Nosed Reports"
---

![Prompt:red nose reindeer who is holding a clipboard with checklist and looking at a nuclear reactor with nuke logo](images/02.webp){width="500" fig-align="center"}

## Part 1

::: {.callout-note title="Puzzle Info" collapse="true"}
The unusual data (your puzzle input) consists of many reports, one report per line. Each report is a list of numbers called levels that are separated by spaces. For example:
```
7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
```
This example data contains six reports each containing five levels.

The engineers are trying to figure out which reports are safe. The Red-Nosed reactor safety systems can only tolerate levels that are either gradually increasing or gradually decreasing. So, a report only counts as safe if both of the following are true:

- The levels are either all increasing or all decreasing.
- Any two adjacent levels differ by at least one and at most three.

In the example above, the reports can be found safe or unsafe by checking those rules:

- 7 6 4 2 1: Safe because the levels are all decreasing by 1 or 2.
- 1 2 7 8 9: Unsafe because 2 7 is an increase of 5.
- 9 7 6 2 1: Unsafe because 6 2 is a decrease of 4.
- 1 3 2 4 5: Unsafe because 1 3 is increasing but 3 2 is decreasing.
- 8 6 4 4 1: Unsafe because 4 4 is neither an increase or a decrease.
- 1 3 6 7 9: Safe because the levels are all increasing by 1, 2, or 3.

So, in this example, 2 reports are safe.

Analyze the unusual data from the engineers. How many reports are safe?

:::

```{python}
eg = """7 6 4 2 1
1 2 7 8 9
9 7 6 2 1
1 3 2 4 5
8 6 4 4 1
1 3 6 7 9
"""

def parse(inp:str) -> list[list[int]]:
    res = []
    for line in inp.splitlines():
        row = line.split()
        res.append([int(x) for x in row])
    return res


def cond1(row:list[int]) -> bool:
    # Condition 1: Always inc or dec
    inc = sorted(row)
    dec = sorted(row, reverse=True)
    return all([r == x for r,x in zip(row, inc)]) or all([r == x for r,x in zip(row, dec)])


def cond2(row:list[int]) -> bool:
    # Condition 2: Delta between 1-3
    pairs = zip(row, row[1:]) # <1>
    return all([1 <= abs(x-y) <= 3 for x,y in pairs])


def part1(inp:str) -> int:
    rows = parse(inp)
    cnt = 0
    for row in rows:
        if cond1(row) and cond2(row):
            cnt += 1
    return cnt

part1(eg)
```
1. Reminder that `zip` can take inputs of different lengths without error

```{python}
with open("inputs/02","r") as f:
    inp = f.read()
part1(inp)
```

## Part 2

::: {.callout-note title="Puzzle Info" collapse="true"}
Now, the same rules apply as before, except if removing a single level from an unsafe report would make it safe, the report instead counts as safe.

More of the above example's reports are now safe:

- 7 6 4 2 1: Safe without removing any level.
- 1 2 7 8 9: Unsafe regardless of which level is removed.
- 9 7 6 2 1: Unsafe regardless of which level is removed.
- 1 3 2 4 5: Safe by removing the second level, 3.
- 8 6 4 4 1: Safe by removing the third level, 4.
- 1 3 6 7 9: Safe without removing any level.

Thanks to the Problem Dampener, 4 reports are actually safe!
:::

```{python}
def part2(inp: str) -> int:
    rows = parse(inp)
    cnt = 0
    for row in rows:
        # Check if original full row passes
        if cond1(row) and cond2(row):
            cnt += 1
            continue  # <1>
        # Check if shortened rows pass
        for i in range(len(row)):
            short_row = row.copy()
            short_row.pop(i)
            if cond1(short_row) and cond2(short_row):
                cnt += 1
                break  # <1>

    return cnt


part2(eg)
```

1. Good refresher on the difference between `continue` and `break`

```{python}
part2(inp)
```
